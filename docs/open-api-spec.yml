openapi: '3.0.2'
info:
  title: 'Bar Assistant API'
  version: '1.0.0'
  description: |-
    Bar assistant is a self hosted application for managing your home bar. It allows you to add ingredients and create custom cocktail recipes.
servers:
  - url: https://127.0.0.1:8000/api
tags:
  - name: Server
    description: Operations related to server
  - name: Auth
    description: Operations related to user authentication
  - name: Ingredients
    description: Operations related to ingredients
  - name: Cocktails
    description: Operations related to cocktails
  - name: Glasses
    description: Operations related to glasses
  - name: Images
    description: Operations related to images
  - name: "Ingredient categories"
    description: Operations related to ingredient categories
  - name: "User shelf"
    description: Operations related to user shelf
  - name: Users
    description: Operations related to users
  - name: "Shopping list"
    description: Operations related to user shopping list
security:
  - user_token: []
paths:
  /server/version:
    get:
      tags:
        - Server
      security: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /login:
    post:
      tags:
        - Auth
      summary: Authenticate and get a token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII
  /logout:
    post:
      tags:
        - Auth
      summary: Logout currently authenticated user
      security: []
      responses:
        '200':
          description: OK
  /cocktails:
    parameters:
      - in: query
        name: user_id
        required: false
        schema:
          type: integer
          example: 1
        description: 'Show only cocktails made by a specifc user'
    get:
      tags:
        - "Cocktails"
      summary: 'Show a paginated list of cocktails'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cocktail'
    post:
      tags:
        - "Cocktails"
      summary: 'Create a new cocktail'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cocktail'
  /cocktails/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: Database id of the cocktail
      schema:
        type: integer
    get:
      tags:
        - "Cocktails"
      summary: 'Details of a specific cocktail'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Cocktail'
    put:
      tags:
        - "Cocktails"
      summary: 'Update a specific cocktail'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Cocktail'
    delete:
      tags:
        - "Cocktails"
      summary: 'Delete a specific cocktail'
      responses:
        '200':
          description: OK
  /cocktails/{id}/toggle-favorite:
    parameters:
    - name: id
      in: path
      required: true
      description: Database id of the cocktail
      schema:
        type: integer
    post:
      tags:
        - "Cocktails"
      summary: 'Toggle adding cocktail to favorites'
      responses:
        '200':
          description: OK
  /cocktails/random:
    get:
      tags:
        - "Cocktails"
      summary: 'Get a random cocktail'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Cocktail'
  /cocktails/user-shelf:
    get:
      tags:
        - "Cocktails"
      summary: 'Get a list of cocktails that currently authorized user can make'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cocktail'
  /cocktails/user-favorites:
    get:
      tags:
        - "Cocktails"
      summary: 'Get a list of cocktails that currently authorized user added to his favorites'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Cocktail'
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: 'Get a list of ingredients'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Ingredient'
    post:
      tags:
        - Ingredients
      summary: 'Create a new ingredient'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ingredient'
  /ingredients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Database id of the ingredient
        schema:
          type: integer
    get:
      tags:
        - Ingredients
      summary: 'Details of a specific ingredient'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Ingredient'
    put:
      tags:
        - Ingredients
      summary: 'Update an existing ingredient'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ingredient'
    delete:
      tags:
        - Ingredients
      summary: 'Delete a specific ingredient'
      responses:
        '200':
          description: OK
  /glasses:
    get:
      tags:
        - Glasses
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Glass'
  /glasses/{id}:
    get:
      tags:
        - Glasses
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Glass'
  /images:
    post:
      tags:
        - Images
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
  /images/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of the image'
        schema:
          type: integer
        required: true
    get:
      tags:
        - Images
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
    put:
      tags:
        - Images
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                copyright:
                  type: string
                  example: 'Copyright of the image'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
    delete:
      tags:
        - Images
      responses:
        '200':
          description: OK
  /ingredient-categories:
    get:
      tags:
        - "Ingredient categories"
      summary: 'Show a list of ingredient categories'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IngredientCategory'
    post:
      tags:
        - "Ingredient categories"
      summary: 'Create a new ingredient category'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
  /ingredient-categories/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of the ingredient category'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Ingredient categories"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
    put:
      tags:
        - "Ingredient categories"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
    delete:
      tags:
        - "Ingredient categories"
      responses:
        '200':
          description: OK
  /shelf:
    get:
      tags:
        - "User shelf"
      summary: "Get all ingredients in user shelf"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserIngredient'
    post:
      tags:
        - "User shelf"
      summary: "Add ingredients to user shelf"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ingredient_ids:
                  type: array
                  example: [1]
                  items:
                    type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserIngredient'
  /shelf/{ingredient_id}:
    parameters:
      - in: path
        name: ingredient_id
        description: 'Database id of the ingredient'
        schema:
          type: integer
        required: true
    delete:
      tags:
        - "User shelf"
      summary: Delete a single ingredient from user shelf
      responses:
        '200':
          description: OK
components:
  securitySchemes:
    user_token:
      type: http
      scheme: bearer
  schemas:
    Glass:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: 'Cocktail glass'
        description:
          type: string
          nullable: true
          example: 'Description of glass'
    IngredientRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Jack Daniels'
        strength:
          type: number
          format: float
          example: 40.0
        description:
          type: string
          example: 'A type of whiskey'
          nullable: true
        origin:
          type: string
          example: 'North America'
          nullable: true
        images:
          type: array
          example: [1, 2, 3]
          items:
            type: integer
        ingredient_category_id:
          type: integer
          example: 1
        color:
          type: string
          format: hex
          example: '#ffffff'
          nullable: true
        parent_ingredient_id:
          type: integer
          example: 1
          nullable: true
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        slug:
          type: string
          example: 'jack-daniels'
          readOnly: true
        name:
          type: string
          example: 'Jack Daniels'
        strength:
          type: number
          format: float
          example: 40.0
        description:
          type: string
          example: 'A type of whiskey'
        origin:
          type: string
          example: 'North America'
        main_image_id:
          type: integer
          example: 1
          nullable: true
        images:
          type: array
          example: [1, 2, 3]
          items:
            type: integer
        ingredient_category_id:
          type: integer
          example: 1
        color:
          type: string
          format: hex
          example: '#ffffff'
          nullable: true
        category:
          $ref: '#/components/schemas/IngredientCategory'
        cocktails_count:
          type: integer
          example: 12
        varieties:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: 'ingredient-1'
              name:
                type: string
                example: 'Ingredient 1'
        cocktails:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: 'cocktail-1'
              name:
                type: string
                example: 'Cocktail 1'
    IngredientCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: Spirits
        description:
          type: string
          nullable: true
          example: 'A category of base spirits'
    IngredientCategoryRequest:
      type: object
      properties:
        name:
          type: string
          example: Spirits
        description:
          type: string
          nullable: true
          example: 'A category of base spirits'
    Version:
      type: object
      properties:
        name:
          type: string
          example: 'Bar Assistant'
        version:
          type: string
          example: 'v1.0.0'
        meilisearch_host:
          type: string
          format: hostname
          example: 'https://my-meilisearch-server.com'
        meilisearch_version:
          type: string
          example: '0.29.0'
    Image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        file_path:
          type: string
          example: 'ingredients/ingredient-image.png'
        url:
          type: string
          example: 'http://localhost.com/app_images/ingredients/ingredient-image.png'
        copyright:
          type: string
          example: 'Somewhere from the web'
        last_modified:
          type: string
          example: '2022-11-17T09:52:48.000000Z'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Bar Tender'
        email:
          type: string
          example: 'bar@tender.com'
        search_host:
          type: string
          example: 'http://meilisearch-server.com'
        search_api_key:
          type: string
          example: MEILI_API_KEY
        favorite_cocktails:
          type: array
          example: [1, 2]
          items:
            type: integer
        shelf_ingredients:
          type: array
          example: [1, 2]
          items:
            type: integer
        shopping_lists:
          type: array
          example: [1, 2]
          items:
            type: integer
    CocktailIngredientSubstitute:
      type: object
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: 'ingredient-1'
        name:
          type: string
          example: 'Ingredient 1'
    CocktailIngredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sort:
          type: integer
          example: 0
        amount:
          type: number
          format: float
          example: 30.0
        units:
          type: string
          example: ml
        optional:
          type: boolean
          example: false
        ingredient_id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Ingredient name'
        ingredient_slug:
          type: string
          example: 'ingredient-name'
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstitute'
    Cocktail:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        slug:
          type: string
          example: 'cocktail-name'
          readOnly: true
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: |-
            1. Step
            2. Step
        garnish:
          type: string
          nullable: true
          example: Lemon wheel
        description:
          type: string
          nullable: true
          example: 'A short cocktail description'
        source:
          type: string
          nullable: true
          example: http://wikipedia.org
        main_image_id:
          type: integer
          example: 1
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        tags:
          type: array
          example: ['Gin', 'IBA Official']
          items:
            type: string
        user_id:
          type: integer
          example: 1
        glass:
          $ref: '#/components/schemas/Glass'
        short_ingredients:
          type: array
          example: ['Gin', 'Tonic', 'Lemon Juice']
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredient'
    CocktailRequest:
      type: object
      required:
        - name
        - instructions
      properties:
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: |-
            1. Step
            2. Step
        garnish:
          type: string
          nullable: true
          example: Lemon wheel
        description:
          type: string
          nullable: true
          example: 'A short cocktail description'
        source:
          type: string
          nullable: true
          example: http://wikipedia.org
        images:
          type: array
          example: [1, 2]
          items:
            type: integer
            description: Image resource id
            example: 1
        tags:
          type: array
          example: ['Gin', 'IBA Official']
          items:
            type: string
        glass_id:
          type: integer
          example: 1
          nullable: true
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient_id:
                type: integer
                example: 1
              amount:
                type: number
                format: float
                example: 30
              units:
                type: string
                example: ml
              optional:
                type: boolean
                example: false
              sort:
                type: integer
                example: 0
    ImageRequest:
      type: object
      properties:
        images:
          type: array
          items:
            type: object
            properties:
              image:
                type: string
                format: binary
              copyright:
                type: string
    UserIngredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        ingredient_id:
          type: integer
          example: 1
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          example: 'api_error'
        message:
          type: string
          example: 'This is an detailed error message'
    SuccessActionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
