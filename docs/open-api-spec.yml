openapi: '3.0.2'
info:
  title: 'Bar Assistant API'
  version: '{{VERSION}}'
  description: |-
    Bar assistant is a self hosted application for managing your home bar. It allows you to add ingredients and create custom cocktail recipes.
servers:
  - url: /api
tags:
  - name: Server
    description: Operations related to server
  - name: Auth
    description: Operations related to user authentication
  - name: Ingredients
    description: Operations related to ingredients
  - name: Cocktails
    description: Operations related to cocktails
  - name: Glasses
    description: Operations related to glasses
  - name: Images
    description: Operations related to images
  - name: "Ingredient categories"
    description: Operations related to ingredient categories
  - name: "User shelf"
    description: Operations related to user shelf
  - name: User
    description: Operations related to current user
  - name: Users
    description: Operations related to users
  - name: "Shopping list"
    description: Operations related to user shopping list
  - name: "Tags"
    description: Operations related to tags
  - name: "Ratings"
    description: Operations related to resource ratings
  - name: "Stats"
    description: Operations related to app statistics
  - name: "Cocktail methods"
    description: Operations related to cocktail methods
  - name: "Notes"
    description: Operations related to notes
  - name: "Collections"
    description: Operations related to user collections
security:
  - user_token: []
paths:
  /server/version:
    get:
      tags:
        - Server
      summary: Get server version information
      security: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
  /server/openapi:
    get:
      tags:
        - Server
      summary: Get open api specification in yaml format
      security: []
      responses:
        '200':
          description: OpenAPI schema in yaml format
  /login:
    post:
      tags:
        - Auth
      summary: Authenticate and get a token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  example: password
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /logout:
    post:
      tags:
        - Auth
      summary: Logout currently authenticated user
      security: []
      responses:
        '200':
          description: Successful response
  /cocktails:
    get:
      parameters:
      - in: query
        name: filter
        required: false
        description: Filter by specific parameters
        explode: true
        style: deepObject
        schema:
          type: object
          properties:
            id:
              type: string
              example: 3,4,5
            name:
              type: string
              example: "old"
            ingredient_name:
              type: string
              example: "campari"
            ingredient_id:
              type: integer
              example: 3
            tag_id:
              type: string
              example: 4
            user_id:
              type: string
              example: 3
            glass_id:
              type: string
              example: 1
            cocktail_method_id:
              type: string
              example: 1
            favorites:
              type: boolean
              example: true
            on_shelf:
              type: boolean
              example: true
            is_public:
              type: boolean
              example: true
      - in: query
        name: sort
        required: false
        schema:
          type: string
          example: name,-created_at,favorited_at
        description: Sort by specific parameters, toggle order by adding "-"
      - in: query
        name: per_page
        required: false
        schema:
          type: integer
          example: 15
        description: Total results per page
      - in: query
        name: page
        required: false
        schema:
          type: integer
          example: 1
        description: Page number
      tags:
        - "Cocktails"
      summary: 'Show a paginated list of cocktails'
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Cocktail'
                  - $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - "Cocktails"
      summary: 'Create a new cocktail'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/cocktails/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Cocktail'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /register:
    post:
      tags:
        - Auth
      security: []
      summary: "Register a new user"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "newuser@domain.com"
                name:
                  type: string
                  example: "New User"
                password:
                  type: string
                  example: "P4SSW0RD"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /cocktails/{id}:
    parameters:
    - name: id
      in: path
      required: true
      description: Database id of the cocktail
      schema:
        type: integer
    get:
      tags:
        - "Cocktails"
      summary: 'Details of a specific cocktail'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Cocktail'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Cocktails"
      summary: 'Update a specific cocktail'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Cocktail'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Cocktails"
      summary: 'Delete a specific cocktail'
      responses:
        '204':
          description: Successfully deleted cocktail response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /cocktails/{id}/toggle-favorite:
    parameters:
    - name: id
      in: path
      required: true
      description: Database id of the cocktail
      schema:
        type: integer
    post:
      tags:
        - "Cocktails"
      summary: 'Toggle adding cocktail to favorites'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: 'Cocktail favorite ID'
                        example: 1
                      is_favorited:
                        type: boolean
                        description: 'Is cocktail favorited'
                        example: true
        '404':
          $ref: '#/components/responses/NotFound'
  /cocktails/{id}/public-link:
    parameters:
    - name: id
      in: path
      required: true
      description: Database id of the cocktail
      schema:
        type: integer
    post:
      tags:
        - "Cocktails"
      summary: 'Create a public ID for cocktail'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      public_id:
                        type: string
                        description: 'Public cocktail ULID'
                        example: "01ARZ3NDEKTSV4RRFFQ69G5FAV"
                      public_at:
                        type: string
                        description: 'ULID created at datetime'
                        example: "2023-03-14T20:20:20.000000Z"
                      public_expires_at:
                        type: string
                        description: 'ULID expiration datetime'
                        example: "2023-05-14T21:23:40.000000Z"
                        nullable: true
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - "Cocktails"
      summary: 'Delete cocktail public link'
      responses:
        '204':
          description: Successfully deleted public link
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /shelf/cocktails:
    get:
      parameters:
        - in: query
          name: limit
          required: false
          schema:
            type: integer
            example: 20
          description: 'Limit number of shown cocktails'
      tags:
        - "User shelf"
      summary: 'Get a list of cocktail ids that authorized user can make'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: integer
                      example: 1
  /ingredients:
    get:
      parameters:
      - in: query
        name: filter
        required: false
        description: Filter by specific parameters
        explode: true
        style: deepObject
        schema:
          type: object
          properties:
            id:
             type: string
             example: 1,2
            name:
             type: string
             example: "whi"
            name_exact:
             type: string
             example: "whiskey"
            category_id:
             type: string
             example: 1
            origin:
             type: string
             example: "France"
            on_shopping_list:
             type: boolean
             example: true
            on_shelf:
             type: boolean
             example: true
            strength_min:
             type: integer
             example: 20
            strength_max:
             type: integer
             example: 50
      - in: query
        name: sort
        required: false
        schema:
          type: string
          example: name,-created_at
        description: Sort by specific parameters
      - in: query
        name: per_page
        required: false
        schema:
          type: integer
          example: 15
        description: Total results per page
      - in: query
        name: page
        required: false
        schema:
          type: integer
          example: 1
        description: Page number
      tags:
        - Ingredients
      summary: 'Get a list of ingredients'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Ingredient'
                  - $ref: '#/components/schemas/PaginationResponse'
    post:
      tags:
        - Ingredients
      summary: 'Create a new ingredient'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/ingredients/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ingredient'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /ingredients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Database id of the ingredient
        schema:
          type: integer
    get:
      tags:
        - Ingredients
      summary: 'Details of a specific ingredient'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                    data:
                      $ref: '#/components/schemas/Ingredient'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Ingredients
      summary: 'Update an existing ingredient'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Ingredient'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Ingredients
      summary: 'Delete a specific ingredient'
      responses:
        '204':
          description: Successfully deleted ingredient
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /glasses:
    get:
      tags:
        - Glasses
      summary: Show a list of glass types
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Glass'
    post:
      tags:
        - Glasses
      summary: Create a new glass type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/glasses/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Glass'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /glasses/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Database id of the glass
        schema:
          type: integer
    get:
      tags:
        - Glasses
      summary: Get a specific glass type
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Glass'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Glasses
      summary: Update a specific glass type
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Glass'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - Glasses
      summary: Delete specific glass type
      responses:
        '204':
          description: Successful response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /images:
    get:
      tags:
        - Images
      summary: Paginated list of images
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Image'
                  - $ref: '#/components/schemas/PaginationResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
    post:
      tags:
        - Images
      summary: Save multiple images
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /images/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of the image'
        schema:
          type: integer
        required: true
    get:
      tags:
        - Images
      summary: Get a specific image
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - Images
      summary: Update image information
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Image'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - Images
      summary: Remove a specific image
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /images/{id}/thumb:
    parameters:
      - in: path
        name: id
        description: 'Database id of the image'
        schema:
          type: integer
        required: true
    get:
      tags:
        - Images
      summary: Get a thumbnail of an image
      responses:
        '200':
          description: Successful response
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '404':
          $ref: '#/components/responses/NotFound'
  /ingredient-categories:
    get:
      tags:
        - "Ingredient categories"
      summary: 'Show a list of ingredient categories'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IngredientCategory'
    post:
      tags:
        - "Ingredient categories"
      summary: 'Create a new ingredient category'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/ingredient-categories/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /ingredient-categories/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of the ingredient category'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Ingredient categories"
      summary: Get a specific ingredient category
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Ingredient categories"
      summary: Update a specific ingredient category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/IngredientCategory'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Ingredient categories"
      summary: Delete specific ingredient category
      responses:
        '204':
          description: Successful response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /shelf/ingredients:
    get:
      tags:
        - "User shelf"
      summary: "Get all ingredients in user shelf"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserIngredient'
    post:
      tags:
        - "User shelf"
      summary: "Add multiple ingredients to user shelf"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ingredient_ids:
                  type: array
                  example: [1]
                  items:
                    type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserIngredient'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /shelf/ingredients/{ingredientId}:
    parameters:
      - in: path
        name: ingredientId
        description: 'Database id of the ingredient'
        schema:
          type: integer
        required: true
    post:
      tags:
        - "User shelf"
      summary: "Add a single ingredient to user shelf"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserIngredient'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "User shelf"
      summary: Delete a single ingredient from user shelf
      responses:
        '204':
          description: Successfully deleted ingredient
        '404':
          $ref: '#/components/responses/NotFound'
  /user:
    get:
      tags:
        - "User"
      summary: "Get info about currently authenticated user"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
    post:
      tags:
        - "User"
      summary: "Update currently authenticated user"
      description: "Updates currently authenticated user with new information. If password field is present also changes the password."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: new@email.com
                name:
                  type: string
                  example: New name
                password:
                  type: string
                  nullable: true
                  example: "new-password"
                password_confirmation:
                  type: string
                  nullable: true
                  example: "new-password"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /shopping-list:
    get:
      tags:
        - "Shopping list"
      summary: "Show ingredients on your shopping list"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserShoppingList'
  /shopping-list/batch-store:
    post:
      tags:
        - "Shopping list"
      summary: "Add multiple ingredients to a shopping list"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ingredient_ids:
                  type: array
                  example: [1, 2, 3]
                  items:
                    type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserShoppingList'
  /shopping-list/batch-delete:
    post:
      tags:
        - "Shopping list"
      summary: "Delete multiple ingredients from a shopping list"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ingredient_ids:
                  type: array
                  example: [1, 2, 3]
                  items:
                    type: integer
      responses:
        '200':
          description: Successful response with deleted ingredient ids
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      ingredient_ids:
                        type: array
                        example: [1, 2, 3]
                        items:
                          type: integer
  /tags:
    get:
      tags:
        - "Tags"
      summary: 'Show a list of all tags'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Tag'
    post:
      tags:
        - "Tags"
      summary: 'Create a new tag'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/tags/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tag'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /tags/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a tag'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Tags"
      summary: Get a specific tag
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tag'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Tags"
      summary: Update a specific tag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Tag'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Tags"
      summary: Delete specific tag
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /ratings/cocktails/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a cocktail'
        schema:
          type: integer
        required: true
    post:
      tags:
        - "Ratings"
      summary: "Rate cocktail"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  example: 3
      responses:
        '200':
          description: Successful rating update response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Rating'
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Rating'
        '400':
          description: Resource already rated by user
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Ratings"
      summary: Delete current user's cocktail rating
      responses:
        '204':
          description: Successfully deleted rating
        '404':
          $ref: '#/components/responses/NotFound'
  /users:
    get:
      tags:
        - Users
      summary: Show a list of users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/users/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Database id of the user
        schema:
          type: integer
    get:
      tags:
        - Users
      summary: Get a specific user
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Users
      summary: Update a specific user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - Users
      summary: Delete a specific user
      responses:
        '204':
          description: Successful response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /stats:
    get:
      tags:
        - Stats
      summary: Application stats
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/StatsResponse'
  /cocktail-methods:
    get:
      tags:
        - "Cocktail methods"
      summary: 'Show a list of all methods'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CocktailMethodResponse'
    post:
      tags:
        - "Cocktail methods"
      summary: 'Create a new method'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/cocktail-methods/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CocktailMethodResponse'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /cocktail-methods/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a method'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Cocktail methods"
      summary: Get a specific method
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CocktailMethodResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Cocktail methods"
      summary: Update a specific method
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CocktailMethodResponse'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Cocktail methods"
      summary: Delete specific method
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /notes:
    post:
      tags:
        - "Notes"
      summary: Create a new note
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/notes/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NoteResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /notes/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a note'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Notes"
      summary: Show a single note
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NoteResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - "Notes"
      summary: Delete specific note
      responses:
        '204':
          description: Successful response
        '404':
          $ref: '#/components/responses/NotFound'
  /collections:
    get:
      tags:
        - "Collections"
      summary: List user collections
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CollectionResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    post:
      tags:
        - "Collections"
      summary: Create a new collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '201':
          description: Successful response
          headers:
            Location:
              description: Absolute URL to new resource
              schema:
                type: string
                example: 'http://localhost/api/collections/1'
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CollectionResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /collections/{id}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a collection'
        schema:
          type: integer
        required: true
    get:
      tags:
        - "Collections"
      summary: Show a single collection
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CollectionResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - "Collections"
      summary: Update a specific collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CollectionResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - "Collections"
      summary: Delete specific collection
      responses:
        '204':
          description: Successful response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
  /collections/{id}/cocktails/{cocktailId}:
    parameters:
      - in: path
        name: id
        description: 'Database id of a collection'
        schema:
          type: integer
        required: true
      - in: path
        name: cocktailId
        description: 'Database id of a cocktail'
        schema:
          type: integer
        required: true
    put:
      tags:
        - "Collections"
      summary: Add cocktail to collection
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CollectionResponse'
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags:
        - "Collections"
      summary: Remove cocktail from collection
      responses:
        '204':
          description: Successful response
        '403':
          $ref: '#/components/responses/NotAuthorized'
        '404':
          $ref: '#/components/responses/NotFound'
components:
  securitySchemes:
    user_token:
      type: http
      scheme: bearer
  responses:
    UnprocessableEntity:
      description: Request body validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                example: api_error
              message:
                type: string
                example: 'Resource record not found.'
    NotAuthorized:
      description: Not authorized
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                example: api_error
              message:
                type: string
                example: 'You are not authorized for this action.'
  schemas:
    Glass:
      type: object
      nullable: true
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: 'Cocktail glass'
        description:
          type: string
          nullable: true
          example: 'Description of glass'
    IngredientRequest:
      type: object
      required:
        - name
        - strength
        - ingredient_category_id
      properties:
        name:
          type: string
          example: 'Jack Daniels'
        strength:
          type: number
          format: float
          example: 40.0
        description:
          type: string
          example: 'A type of whiskey'
          nullable: true
        origin:
          type: string
          example: 'North America'
          nullable: true
        images:
          type: array
          example: [1, 2, 3]
          items:
            type: integer
        ingredient_category_id:
          type: integer
          example: 1
        color:
          type: string
          format: hex
          example: '#ffffff'
          nullable: true
        parent_ingredient_id:
          type: integer
          example: 1
          nullable: true
    Ingredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        slug:
          type: string
          example: 'jack-daniels'
          readOnly: true
        name:
          type: string
          example: 'Jack Daniels'
        strength:
          type: number
          format: float
          example: 40.0
        description:
          type: string
          nullable: true
          example: 'A type of whiskey'
        origin:
          type: string
          nullable: true
          example: 'North America'
        main_image_id:
          type: integer
          example: 1
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        parent_ingredient_id:
          type: integer
          example: 1
          nullable: true
        ingredient_category_id:
          type: integer
          example: 1
        color:
          type: string
          format: hex
          example: '#ffffff'
          nullable: true
        category:
          $ref: '#/components/schemas/IngredientCategory'
        cocktails_count:
          type: integer
          example: 12
        varieties:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: 'ingredient-1'
              name:
                type: string
                example: 'Ingredient 1'
        cocktails:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: 'cocktail-1'
              name:
                type: string
                example: 'Cocktail 1'
    IngredientCategory:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        name:
          type: string
          example: Spirits
        description:
          type: string
          nullable: true
          example: 'A category of base spirits'
    IngredientCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Spirits
        description:
          type: string
          nullable: true
          example: 'A category of base spirits'
    GlassRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Cocktail glass
        description:
          type: string
          nullable: true
          example: 'A stemmed glass'
    Version:
      type: object
      properties:
        name:
          type: string
          example: 'Bar Assistant'
        version:
          type: string
          example: 'v1.0.0'
        type:
          type: string
          example: 'local'
        search_host:
          type: string
          format: hostname
          example: 'https://my-meilisearch-server.com'
        search_version:
          type: string
          example: '0.29.0'
    Image:
      type: object
      properties:
        id:
          type: integer
          example: 1
        file_path:
          type: string
          example: 'ingredients/ingredient-image.png'
        url:
          type: string
          example: 'http://localhost.com/app_images/ingredients/ingredient-image.png'
        copyright:
          type: string
          example: 'Somewhere from the web'
          nullable: true
        sort:
          type: integer
          example: 1
        placeholder_hash:
          type: string
          nullable: true
          description: ThumbHash implementation for placeholder image
          example: '1QcSHQRnh493V4dIh4eXh1h4kJUI'
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Bar Tender'
        email:
          type: string
          example: 'bar@tender.com'
        search_host:
          type: string
          example: 'http://meilisearch-server.com'
        search_api_key:
          type: string
          example: MEILI_API_KEY
        favorite_cocktails:
          type: array
          example: [1, 2]
          items:
            type: integer
        shelf_ingredients:
          type: array
          example: [1, 2]
          items:
            type: integer
        shopping_lists:
          type: array
          example: [1, 2]
          items:
            type: integer
    CocktailIngredientSubstitute:
      type: object
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: 'ingredient-1'
        name:
          type: string
          example: 'Ingredient 1'
    CocktailIngredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        sort:
          type: integer
          example: 0
        amount:
          type: number
          format: float
          example: 30.0
        units:
          type: string
          example: ml
        optional:
          type: boolean
          example: false
        ingredient_id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Ingredient name'
        ingredient_slug:
          type: string
          example: 'ingredient-name'
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstitute'
    Cocktail:
      type: object
      properties:
        id:
          type: integer
          example: 1
          readOnly: true
        slug:
          type: string
          example: 'cocktail-name'
          readOnly: true
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: |-
            1. Step
            2. Step
        garnish:
          type: string
          nullable: true
          example: Lemon wheel
        description:
          type: string
          nullable: true
          example: 'A short cocktail description'
        source:
          type: string
          nullable: true
          example: http://wikipedia.org
        main_image_id:
          type: integer
          example: 1
          nullable: true
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        tags:
          type: array
          example: ['Gin', 'IBA Official']
          items:
            type: string
        user_id:
          type: integer
          example: 1
        glass:
          $ref: '#/components/schemas/Glass'
        short_ingredients:
          type: array
          example: ['Gin', 'Tonic', 'Lemon Juice']
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredient'
        user_rating:
          type: integer
          nullable: true
          example: 3
        average_rating:
          type: integer
          nullable: true
          example: 3
        main_ingredient_name:
          type: string
          nullable: true
          example: Gin
        created_at:
          type: string
          example: 2023-01-01 12:00:00
        method:
          $ref: '#/components/schemas/CocktailMethodResponse'
        abv:
          type: number
          format: float
          nullable: true
          example: 18.12
        has_public_link:
          type: boolean
          example: false
        notes:
          type: array
          items:
            $ref: '#/components/schemas/NoteResponse'
    CocktailRequest:
      type: object
      required:
        - name
        - instructions
      properties:
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: |-
            1. Step
            2. Step
        garnish:
          type: string
          nullable: true
          example: Lemon wheel
        description:
          type: string
          nullable: true
          example: 'A short cocktail description'
        source:
          type: string
          nullable: true
          example: http://wikipedia.org
        images:
          type: array
          example: [1, 2]
          items:
            type: integer
            description: Image resource id
            example: 1
        tags:
          type: array
          example: ['Gin', 'IBA Official']
          items:
            type: string
        glass_id:
          type: integer
          example: 1
          nullable: true
        ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient_id:
                type: integer
                example: 1
              amount:
                type: number
                format: float
                example: 30
              units:
                type: string
                example: ml
              optional:
                type: boolean
                example: false
              sort:
                type: integer
                example: 0
    ImageRequest:
      type: object
      required:
        - images
      properties:
        image:
          type: string
          nullable: true
          format: binary
        image_url:
          type: string
          nullable: true
          format: URL
          example: "https://pathtoimage.com/image.jpg"
        sort:
          type: integer
          nullable: true
          example: 1
        copyright:
          type: string
          example: "Wikipedia"
          nullable: true
    UserIngredient:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ingredient_id:
          type: integer
          example: 1
        ingredient_slug:
          type: string
          example: "coffee"
    Tag:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Tag name"
    TagRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: A new tag
    UserShoppingList:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        ingredient:
          type: object
          properties:
            id:
              type: integer
              example: 1
            slug:
              type: string
              example: 'ingredient-1'
            name:
              type: string
              example: 'Ingredient 1'
    ValidationErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: "The resource name must be a string. (and 4 more errors)"
        errors:
          type: object
          properties:
            property_key:
              type: array
              example: ["The property_key field is required."]
              items:
                type: string
    PaginationResponse:
      type: object
      properties:
        links:
          type: object
          properties:
            first:
              type: string
              nullable: true
              example: http://localhost/api/resource?page=1
            last:
              type: string
              nullable: true
              example: http://localhost/api/resource?page=10
            prev:
              type: string
              nullable: true
              example: null
            next:
              type: string
              nullable: true
              example: http://localhost/api/resource?page=2
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            from:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 10
            links:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                  label:
                    type: string
                  active:
                    type: boolean
            path:
              type: string
              example: http://localhost/api/resource
            per_page:
              type: integer
              example: 15
            to:
              type: integer
              example: 15
            total:
              type: integer
              example: 100
    Rating:
      type: object
      properties:
        id:
          type: integer
          example: 1
        rateable_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        rating:
          type: integer
          example: 3
    UserRequest:
      type: object
      properties:
        name:
          type: string
          example: User Name
        email:
          type: string
          example: admin@example.com
        password:
          type: string
          example: password
        is_admin:
          type: boolean
          example: false
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: User Name
        email:
          type: string
          example: admin@example.com
        is_admin:
          type: boolean
          example: false
        search_api_key:
          type: string
          example: 3aab83bbed9bb5e38d00c0c10a006676ed8703a26ffc8c644e2f588a5a574584
    StatsResponse:
      type: object
      properties:
        total_cocktails:
          type: integer
          example: 120
        total_ingredients:
          type: integer
          example: 234
        total_shelf_cocktails:
          type: integer
          example: 43
        total_shelf_ingredients:
          type: integer
          example: 12
        most_popular_ingredients:
          type: array
          items:
            type: object
            properties:
              ingredient_id:
                type: integer
                example: 1
              cocktails_count:
                type: integer
                example: 23
        top_rated_cocktails:
          type: array
          items:
            type: object
            properties:
              cocktail_id:
                type: integer
                example: 1
              avg_rating:
                type: integer
                example: 4
              votes:
                type: integer
                example: 12
    CocktailMethodResponse:
      type: object
      nullable: true
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Method name"
        dilution_percentage:
          type: integer
          example: 23
    CocktailMethodRequest:
      type: object
      properties:
        name:
          type: string
          example: "Method name"
        dilution_percentage:
          type: integer
          example: 23
    NoteRequest:
      type: object
      required:
        - note
        - resource_id
        - resource
      properties:
        note:
          type: string
          example: "My new note body"
        resource_id:
          type: integer
          example: 1
        resource:
          type: string
          enum:
            - cocktail
          example: "cocktail"
    NoteResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        note:
          type: string
          example: "My new note"
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2023-01-01 12:00:00"
    CollectionRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Collection name"
        description:
          type: string
          example: "Collection description"
    CollectionResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Collection name"
        description:
          type: string
          example: "Collection description"
        created_at:
          type: string
          example: "2023-01-01 12:00:00"
        cocktails:
          type: array
          example: [1, 2, 3, 4, 5]
          items:
            type: integer
