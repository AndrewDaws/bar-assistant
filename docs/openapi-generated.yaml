openapi: 3.0.0
info:
  title: 'Bar Assistant API'
  description: "Bar Assistant is a self hosted application for managing your home bar.\n\n    ## Content\n\n    You should set `Content-Type: application/json` header for each request.\n\n    ## Authentication\n\n    Add your login token in header for every request, for example: `Authorization: Bearer 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII`.\n    For requests that need reference to bar, add your bar id via query string, for example: `/api/example?bar_id=1`\n\n    ## Authorization\n\n    You will get response with error message and status code `403` if you try to access resource that you don't have permissions for.\n\n    ## Sorting\n\n    Some endpoints allow sorting by specific attributes. Prepending `-` defines descending order, and omitting it defines ascending order. Separate multiple sorts by a comma. For example: `?sort=name` will sort by name attribute in ascending order.\n\n    ## Includes\n\n    Some endpoints allow including extra relationship data on demand. Separate multiple relations witha a comma. For example: `?include=notes,user` will include extra extra data for notes and user.\n\n    ## Pagination\n\n    Some endpoints allow paginating results. Use `?per_page=30` to limit total results per request. Use `?page=3` to go to a specific page.\n\n    ## Filtering\n\n    Some endpoints allow filtering by a specific attribute. For example: `?filter[attribute_name]=value`.\n\n    [Documentation](https://bar-assistant.github.io/docs/) | [Source](https://github.com/karlomikus/bar-assistant)"
  version: '{{VERSION}}'
paths:
  /bars:
    get:
      tags:
        - Bars
      summary: 'Show a list of bars user has access to'
      operationId: 8e4aff1910c2f6b973c0bcff7ac77418
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bar' } }
                type: object
    post:
      tags:
        - Bars
      summary: 'Create a new bar'
      operationId: af500d926f43cd1cd146adc9c46f8e41
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}':
    get:
      tags:
        - Bars
      summary: 'Show a specific bar'
      operationId: 6e92536f11339d30675019e6e93f9ce4
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Bars
      summary: 'Update a bar'
      operationId: 06fb0f42934fc2cd15b00b25027494d1
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Bars
      summary: 'Delete a bar'
      operationId: dac7d15bfe40981c358d5a52c8a9e31b
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /bars/join:
    post:
      tags:
        - Bars
      summary: 'Join a bar via invite code'
      operationId: 825a1e86cd76f3ca07ad2f11ea45f648
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                invite_code:
                  type: string
                  example: 01H8S3VH2HTEB3D893AW8NTBBC
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships':
    get:
      tags:
        - Bars
      summary: 'List all members of a bar'
      operationId: 7a49e26fb4754edae7aa107fd1e35205
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/BarMembership' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Bars
      summary: 'Leave a bar you are a member of'
      operationId: c3986ac9cf5fe6e4090b993e323480ad
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships/{userId}':
    delete:
      tags:
        - Bars
      summary: 'Remove a member from a bar'
      operationId: 74df840e62b14107dd9d65b49ed84b27
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: userId
          in: path
          description: 'Database id of a user'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/transfer':
    post:
      tags:
        - Bars
      summary: 'Transfer bar ownership'
      operationId: 208f8a6850027fe0ea9f3b304975fa30
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                user_id:
                  description: 'Database id of a user you want to transfer ownership to'
                  type: integer
                  example: 1
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/status':
    post:
      tags:
        - Bars
      summary: 'Update bar status'
      operationId: 200c1aba9ada2cd66a7d0b7a4ec90a8e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  $ref: '#/components/schemas/BarStatusEnum'
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /cocktail-methods:
    get:
      tags:
        - 'Cocktail method'
      summary: 'Show a list of all methods'
      operationId: 14008654b6c5780b9e826e4e2fcf237a
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailMethod' } }
                type: object
    post:
      tags:
        - 'Cocktail method'
      summary: 'Create a new method'
      operationId: 4b70b5048cbee429f002bf3f270c8a94
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktail-methods/{id}':
    get:
      tags:
        - 'Cocktail method'
      summary: 'Show a single method'
      operationId: f1714d10fa6232a1cc65c88929b26bb8
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Cocktail method'
      summary: 'Update a specific method'
      operationId: 7507b8dac0ec7199fc2c229a2c127a4e
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Cocktail method'
      summary: 'Delete specific method'
      operationId: 42b0ceafc9fa786c4984ff1508868ec3
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /glasses:
    get:
      tags:
        - Glasses
      summary: 'Show a list of glass types'
      operationId: aa68a5da541be756aa65f07353e63cdf
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              name:
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Glass' } }
                type: object
    post:
      tags:
        - Glasses
      summary: 'Create a new glass'
      operationId: b81ce1bc5d5988d9221774a715a90950
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/glasses/{id}':
    get:
      tags:
        - Glasses
      summary: 'Show glass'
      operationId: aca8ea95b45a17cfe2a0442cde2f53ad
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Glasses
      summary: 'Update glass'
      operationId: c9c1cb0561aa1222cc78654eaceb9a62
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Glasses
      summary: 'Delete glass'
      operationId: 876925de63d0a9bf6b8d2337661f135a
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /ingredient-categories:
    get:
      tags:
        - 'Ingredient category'
      summary: 'Show a list of ingredient categories'
      operationId: 9c5a332d2fd9a695a6805451249a0c28
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientCategory' } }
                type: object
    post:
      tags:
        - 'Ingredient category'
      summary: 'Create a new ingredient category'
      operationId: beef561152a333f7c81fec58a7590f37
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredient-categories/{id}':
    get:
      tags:
        - 'Ingredient category'
      summary: 'Show ingredient category'
      operationId: cca43ededebdf742491f0f8eb0dcfab5
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Ingredient category'
      summary: 'Update ingredient category'
      operationId: bdd96c56bc078a0dbdbc9cb71b1bd503
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Ingredient category'
      summary: 'Delete ingredient category'
      operationId: 5190ba80efae47305bdbcf1a68de6fd7
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /price-categories:
    get:
      tags:
        - 'Price category'
      summary: 'Show a list of price categories'
      operationId: 8ffdcf8e07576f57714428563d35c0ff
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PriceCategory' } }
                type: object
    post:
      tags:
        - 'Price category'
      summary: 'Create a new price category'
      operationId: 000ce8107dfa5fe811876785a0f24308
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/price-categories/{id}':
    get:
      tags:
        - 'Price category'
      summary: 'Show a price category'
      operationId: 10017aa4f043f641c210bafc56092997
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Price category'
      summary: 'Update price category'
      operationId: 86fc70306463caa72b7bfd33553393be
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Price category'
      summary: 'Delete price category'
      operationId: 9f109b6442b874b6de95a9b1b400d1fb
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /tags:
    get:
      tags:
        - Tag
      summary: 'Show a list of all tags'
      operationId: e5e1e0ec136ce6b73c6636ef9635a596
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Tag' } }
                type: object
    post:
      tags:
        - Tag
      summary: 'Create a new tag'
      operationId: 436ed7a7115fce5026326a5d67a016ac
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/tags/{id}':
    get:
      tags:
        - Tag
      summary: 'Show a single tag'
      operationId: df2e47c29c59436f33f9b36e4b5f30f2
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Tag
      summary: 'Update tag'
      operationId: 3a6faf0d586a666498d08786030214c3
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Tag
      summary: 'Delete tag'
      operationId: 3093352bf630017b8fcf7705e9b329c4
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /utensils:
    get:
      tags:
        - Utensils
      summary: 'Show a list of utensils'
      operationId: 613e6e2fed96a23278a5036159e9087d
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Utensil' } }
                type: object
    post:
      tags:
        - Utensils
      summary: 'Create a new utensil'
      operationId: eef2f70636f45820b56cc0025448f847
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/utensils/{id}':
    get:
      tags:
        - Utensils
      summary: 'Show utensil'
      operationId: 1b9d7fe5ecf4a0271c20ba17654d209a
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Utensils
      summary: 'Update a specific utensil'
      operationId: 0688a6a8648cdad35503bad732bba86f
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Utensils
      summary: 'Delete specific utensil'
      operationId: 2f216f7ba27dd48b73ea157501c8bc81
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
components:
  schemas:
    BarStatusEnum:
      type: string
      enum:
        - provisioning
        - active
        - deactivated
    APIError:
      required:
        - type
        - message
      properties:
        type:
          type: string
          example: api_error
        message:
          type: string
          example: 'Resource record not found.'
      type: object
    Bar:
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: bar-name-1
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type: string
          example: 'A short subtitle of a bar'
          nullable: true
        description:
          type: string
          example: 'Bar description'
          nullable: true
        invite_code:
          type: string
          example: 01H8S3VH2HTEB3D893AW8NTBBC
          nullable: true
        status:
          $ref: '#/components/schemas/BarStatusEnum'
        settings:
          type: array
          items:
            type: string
        search_driver_host:
          type: string
          nullable: true
        search_driver_api_key:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
        created_user:
          $ref: '#/components/schemas/UserBasic'
        updated_user:
          nullable: true
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
        access:
          type: array
          items:
            properties:
              role_id:
                type: integer
                example: 1
              can_edit:
                type: boolean
                example: true
              can_delete:
                type: boolean
                example: true
              can_activate:
                type: boolean
                example: true
              can_deactivate:
                type: boolean
                example: true
            type: object
      type: object
    BarMembership:
      properties:
        user_id:
          type: integer
          example: 1
        user_name:
          type: string
          example: Bartender
        bar_id:
          type: integer
          example: 1
        is_shelf_public:
          type: boolean
          example: true
        use_parent_as_substitute:
          type: boolean
          example: true
      type: object
    BarRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type: string
          example: 'A short subtitle of a bar'
          nullable: true
        description:
          type: string
          example: 'Bar description'
          nullable: true
        slug:
          type: string
          example: bar-name-1
        default_units:
          type: string
          example: ml
          nullable: true
        default_lang:
          type: string
          example: en-US
          nullable: true
        enable_invites:
          type: boolean
        options:
          type: array
          items:
            type: string
      type: object
    CocktailMethod:
      required:
        - id
        - name
        - dilution_percentage
        - cocktails_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Shake
        dilution_percentage:
          type: integer
          example: 20
        cocktails_count:
          type: integer
          example: 32
      type: object
    CocktailMethodRequest:
      required:
        - name
        - dilution_percentage
      properties:
        name:
          type: string
          example: Shake
        dilution_percentage:
          type: integer
          example: 20
      type: object
    Glass:
      required:
        - id
        - name
        - description
        - cocktails_count
        - volume
        - volume_units
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Lowball
        description:
          type: string
          example: 'Glass for smaller cocktails'
          nullable: true
        cocktails_count:
          type: string
          example: 32
        volume:
          type: number
          format: float
          example: 120
          nullable: true
        volume_units:
          type: string
          example: ml
          nullable: true
      type: object
    GlassRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Lowball
        description:
          type: string
          example: 'Glass for smaller cocktails'
          nullable: true
        volume:
          type: number
          format: float
          example: 120
          nullable: true
        volume_units:
          type: string
          example: ml
          nullable: true
      type: object
    IngredientCategory:
      required:
        - id
        - name
        - description
        - ingredients_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Spirits
        description:
          type: string
          example: 'Category of base spirits'
          nullable: true
        ingredients_count:
          type: integer
          example: 32
      type: object
    IngredientCategoryRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Spirits
        description:
          type: string
          example: 'Category of base spirits'
          nullable: true
      type: object
    PriceCategory:
      required:
        - id
        - name
        - description
        - currency
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type: string
          example: 'Current price on amazon.de'
          nullable: true
        currency:
          type: string
          example: EUR
        currency_symbol:
          type: string
          example: €
      type: object
    PriceCategoryRequest:
      required:
        - name
        - currency
      properties:
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type: string
          example: 'Current price on amazon.de'
          nullable: true
        currency:
          type: string
          example: EUR
      type: object
    Tag:
      required:
        - id
        - name
        - cocktails_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Floral
        cocktails_count:
          type: integer
          example: 12
      type: object
    TagRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Floral
      type: object
    UserBasic:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bartender
      type: object
    Utensil:
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Shaker
        description:
          type: string
          example: 'Used to shake ingredients'
          nullable: true
      type: object
    UtensilRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Shaker
        description:
          type: string
          example: 'Used to shake ingredients'
          nullable: true
      type: object
  securitySchemes:
    user_token:
      type: http
      scheme: bearer
security:
  -
    user_token: []
tags:
  -
    name: Bars
    description: Bars
  -
    name: 'Cocktail method'
    description: 'Cocktail method'
  -
    name: Glasses
    description: Glasses
  -
    name: 'Ingredient category'
    description: 'Ingredient category'
  -
    name: 'Price category'
    description: 'Price category'
  -
    name: Tag
    description: Tag
  -
    name: Utensils
    description: Utensils
