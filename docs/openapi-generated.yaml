openapi: 3.1.0
info:
  title: 'Bar Assistant API'
  description: "**Bar Assistant** is all-in-one solution for managing your home bar. Compared to other recipe management software that usually tries to be more for general use, Bar Assistant is made specifically for managing cocktail recipes. This means that there are a lot of cocktail-oriented features, like ingredient substitutes, first-class ingredients, ABV calculations, unit switching and more.\n\n[Homepage](https://barassistant.app/) &middot; [Official Documentation](https://bar-assistant.github.io/docs/) &middot; [GitHub Repository](https://github.com/karlomikus/bar-assistant)\n\n## Rate Limiting\n\nThe rate limit is set to 1,000 requests per minute per IP address, or per user ID if authenticated. Certain endpoints have specific rate limits, such as importing and exporting data. Exporting is limited to 1 request per minute, while importing is restricted to 2 requests per minute for users without a subscription (applicable to cloud-hosted instances).\n\n## Content-Type\n\nEnsure that each request includes the `Content-Type: application/json` header.\n\n## Auth\n\nInclude your login token in the header of every request, using the following format: `Authorization: Bearer 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII`.\n\n## Bar context\n\nFor requests that require a reference to a specific bar, include the `bar_id` in the query string, e.g., `/cocktails?bar_id=1`, or use `Bar-Assistant-Bar-Id` header in your request.\n\n## Authorization\n\nA `403 Forbidden` status code will be returned if you attempt to access a resource without the necessary permissions.\n\n## Sorting\n\nCertain endpoints support sorting by specific attributes. Prepend `-` to an attribute for descending order, or omit it for ascending order. For example, `?sort=name` sorts by the `name` attribute in ascending order. Multiple sorts can be applied by separating attributes with a comma.\n\n## Includes\n\nSome endpoints support the inclusion of related data on demand. To include multiple relationships, separate them with a comma. For example, `?include=notes,user` will include additional data for both notes and the user.\n\n## Pagination\n\nTo paginate results, use the `?per_page=30` parameter to limit the number of results per request. To navigate to a specific page, use `?page=3`.\n\n## Filtering\n\nCertain endpoints allow filtering by specific attributes. For example, `?filter[attribute_name]=value` filters results based on the given attribute. Multiple filter values can be separated by commas, e.g., `?filter[attribute_name]=value1,value2`."
  contact:
    name: 'Bar Assistant'
    url: 'https://barassistant.app'
    email: info@barassistant.app
  license:
    name: MIT
    url: 'https://github.com/karlomikus/bar-assistant/blob/master/LICENSE'
  version: '{{VERSION}}'
servers:
  -
    url: 'http://localhost:8000/api'
    description: 'Local docker development'
  -
    url: 'https://api.barassistant.app/api'
    description: Production
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: 'Authenticate user and get a token'
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Token' }
                type: object
        '400':
          description: 'Unable to authenticate'
      security: []
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: 'Logout currently authenticated user'
      operationId: logout
      responses:
        '204':
          description: 'Successful response'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: 'Register a new user'
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: 'Request a new user password'
      operationId: passwordForgot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: admin@example.com
              type: object
      responses:
        '204':
          description: 'Password reset link sent'
        '400':
          description: 'Unable to send password reset link'
      security: []
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: 'Reset user password'
      operationId: passwordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                token:
                  type: string
                  example: token-from-email
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  minLength: 5
                  example: password
                password_confirmation:
                  type: string
                  minLength: 5
                  example: password
              type: object
      responses:
        '204':
          description: 'Password succssfully reset'
        '400':
          description: 'Unable to reset password'
      security: []
  '/auth/verify/{id}/{hash}':
    get:
      tags:
        - Authentication
      summary: 'Confirm user account'
      operationId: confirmAccount
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a user'
          required: true
          schema:
            type: integer
        -
          name: hash
          in: path
          description: 'Hash string sent to user email'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Account confirmed'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /bars:
    get:
      tags:
        - Bars
      summary: 'Show a list of bars'
      description: 'Show a list of bars user has access to. Includes bars that user has made and bars he is a member of.'
      operationId: listBars
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bar' } }
                type: object
    post:
      tags:
        - Bars
      summary: 'Create a new bar'
      operationId: saveBar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/bars/{id}':
    get:
      tags:
        - Bars
      summary: 'Show a specific bar'
      operationId: showBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Bars
      summary: 'Update a bar'
      operationId: updateBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Bars
      summary: 'Delete a bar'
      operationId: deleteBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /bars/join:
    post:
      tags:
        - Bars
      summary: 'Join a bar via invite code'
      operationId: joinBar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                invite_code:
                  type: string
                  example: 01H8S3VH2HTEB3D893AW8NTBBC
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships':
    get:
      tags:
        - Bars
      summary: 'List all members of a bar'
      operationId: listBarMembership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/BarMembership' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Bars
      summary: 'Leave a bar you are a member of'
      operationId: leaveBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships/{userId}':
    delete:
      tags:
        - Bars
      summary: 'Remove a member from a bar'
      operationId: removeBarMembership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: userId
          in: path
          description: 'Database id of a user'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/transfer':
    post:
      tags:
        - Bars
      summary: 'Transfer bar ownership'
      operationId: transferBarOwnership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                user_id:
                  description: 'Database id of a user you want to transfer ownership to'
                  type: integer
                  example: 1
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/status':
    post:
      tags:
        - Bars
      summary: 'Update bar status'
      operationId: toggleBarStatus
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  $ref: '#/components/schemas/BarStatusEnum'
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /cocktails:
    get:
      tags:
        - Cocktails
      summary: 'Show a list of cocktails'
      operationId: listCocktails
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                type: string
              name:
                type: string
              ingredient_name:
                type: string
              tag_id:
                type: string
              created_user_id:
                type: string
              glass_id:
                type: string
              cocktail_method_id:
                type: string
              collection_id:
                type: string
              favorites:
                type: boolean
              on_shelf:
                type: boolean
              bar_shelf:
                type: boolean
              user_shelves:
                type: string
              shelf_ingredients:
                type: string
              is_public:
                type: boolean
              user_rating_min:
                type: string
              user_rating_max:
                type: string
              average_rating_min:
                type: string
              average_rating_max:
                type: string
              abv_min:
                type: string
              abv_max:
                type: string
              main_ingredient_id:
                type: string
              total_ingredients:
                type: string
              missing_ingredients:
                type: string
              specific_ingredients:
                type: string
              ignore_ingredients:
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`, `average_rating`, `user_rating`, `abv`, `total_ingredients`, `missing_ingredients`, `missing_bar_ingredients`, `favorited_at`.'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `glass`, `method`, `user`, `navigation`, `utensils`, `createdUser`, `updatedUser`, `images`, `tags`, `ingredients.ingredient`, `ratings`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Cocktail' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Cocktails
      summary: 'Create a new cocktail'
      operationId: saveCocktail
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/cocktails/{id}':
    get:
      tags:
        - Cocktails
      summary: 'Show a specific cocktail'
      operationId: showCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Cocktails
      summary: 'Update a specific cocktail'
      operationId: updateCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Cocktails
      summary: 'Delete a specific cocktail'
      operationId: deleteCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/toggle-favorite':
    post:
      tags:
        - Cocktails
      summary: 'Toggle cocktail as favorite'
      operationId: toggleCocktailFavorite
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { properties: { id: { type: integer, example: 1 }, is_favorited: { type: boolean, example: true } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/public-link':
    post:
      tags:
        - Cocktails
      summary: 'Create a public ID for cocktail'
      operationId: createCocktailPublicLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Cocktails
      summary: 'Delete cocktail public link'
      operationId: deleteCocktailPublicLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/share':
    get:
      tags:
        - Cocktails
      summary: 'Share a cocktail'
      operationId: shareCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
        -
          name: type
          in: query
          description: 'Share format'
          schema:
            type: string
            enum:
              - json
              - json-ld
              - yaml
              - yml
              - xml
              - text
              - markdown
              - md
        -
          name: units
          in: query
          description: 'Units of measurement'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [type, content], properties: { type: { type: string, example: json }, content: { type: string, example: '<content in requested format>' } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/similar':
    get:
      tags:
        - Cocktails
      summary: 'Show similar cocktails'
      operationId: showSimilarCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Cocktail' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/copy':
    post:
      tags:
        - Cocktails
      summary: 'Copy cocktail'
      operationId: copyCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/prices':
    get:
      tags:
        - Cocktails
      summary: 'Show cocktail prices'
      description: 'Shows a list of cocktail prices grouped per available price categories. Missing ingredient prices are skipped.'
      operationId: getCocktailPrices
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailPrice' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /cocktail-methods:
    get:
      tags:
        - 'Cocktail method'
      summary: 'Show a list of all methods'
      operationId: listCocktailMethods
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailMethod' } }
                type: object
    post:
      tags:
        - 'Cocktail method'
      summary: 'Create a new method'
      operationId: saveCocktailMethod
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktail-methods/{id}':
    get:
      tags:
        - 'Cocktail method'
      summary: 'Show a single method'
      operationId: showCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Cocktail method'
      summary: 'Update a specific method'
      operationId: updateCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Cocktail method'
      summary: 'Delete specific method'
      operationId: deleteCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /collections:
    get:
      tags:
        - Collections
      summary: 'Show a list of collections'
      operationId: listCollections
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                type: integer
              name:
                type: string
              cocktail_id:
                type: string
            type: object
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `cocktails`.'
          schema:
            type: string
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Collection' } }
                type: object
    post:
      tags:
        - Collections
      summary: 'Create a new collection'
      operationId: saveCollection
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/collections':
    get:
      tags:
        - Collections
      summary: 'List bar shared collections'
      operationId: listSharedCollections
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Collection' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/collections/{id}':
    get:
      tags:
        - Collections
      summary: 'Show a specific collection'
      operationId: showCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Collections
      summary: 'Update a specific collection'
      operationId: updateCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Collections
      summary: 'Delete a specific collection'
      operationId: deleteCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/collections/{id}/cocktails':
    put:
      tags:
        - Collections
      summary: 'Sync cocktails in a collection'
      description: 'Used to updated/add/delete cocktails in a collection. To delete all cocktails pass an empty array.'
      operationId: syncCocktailsInCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                cocktails:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/explore/cocktails/{public_id}':
    get:
      tags:
        - Explore
      summary: 'Show a public cocktail'
      operationId: showPublicCocktail
      parameters:
        -
          name: public_id
          in: path
          description: 'Public cocktail id'
          required: true
          schema:
            type: string
            format: ulid
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailExplore' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /exports:
    get:
      tags:
        - Exports
      summary: 'Show a list of exports'
      operationId: listExports
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Export' } }
                type: object
    post:
      tags:
        - Exports
      summary: 'Create a new export'
      operationId: saveExport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Export' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/exports/{id}':
    delete:
      tags:
        - Exports
      summary: 'Delete export'
      operationId: deleteExport
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/exports/{id}/download':
    get:
      tags:
        - Exports
      summary: 'Download export'
      operationId: downloadExport
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: t
          in: query
          description: Token
          required: true
          schema:
            type: string
        -
          name: e
          in: query
          description: Timestamp
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/octet-stream:
              example: binary
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
    post:
      tags:
        - Exports
      summary: 'Generate download link'
      description: 'Generates a publicly accessible download link for the export. The link will be valid for 1 minute by default.'
      operationId: generateExportDownloadLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/FileDownloadLink' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /glasses:
    get:
      tags:
        - Glasses
      summary: 'Show a list of glass types'
      operationId: listGlassware
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              name:
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Glass' } }
                type: object
    post:
      tags:
        - Glasses
      summary: 'Create a new glass'
      operationId: saveGlassware
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/glasses/{id}':
    get:
      tags:
        - Glasses
      summary: 'Show glass'
      operationId: showGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Glasses
      summary: 'Update glass'
      operationId: updateGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Glasses
      summary: 'Delete glass'
      operationId: deleteGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /images:
    get:
      tags:
        - Images
      summary: 'List uploaded images'
      description: 'List all images uploaded by the authenticated user'
      operationId: listImages
      parameters:
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Image' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Images
      summary: 'Upload an image'
      description: 'Used to upload multiple images at once. Uploaded images via this endpoint will not be attached to any resource. Images are converted to WebP format with 85% quality of the original image.'
      operationId: uploadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - images
              properties:
                images:
                  type: array
                  items: { $ref: '#/components/schemas/ImageRequest' }
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Image' } }
                type: object
  '/images/{id}':
    get:
      tags:
        - Images
      summary: 'Show an image'
      operationId: showImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Image' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Images
      summary: 'Update image'
      operationId: updateImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Image' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Images
      summary: 'Delete image'
      operationId: deleteImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/images/{id}/thumb':
    get:
      tags:
        - Images
      summary: 'Get a thumbnail of an image'
      operationId: getImageThumbnail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /import/cocktail:
    post:
      tags:
        - Import
      summary: 'Import recipe'
      description: 'Import a recipe from a JSON structure that follows Bar Assistant recipe JSON schema. Supported schemas include [Draft 2](https://barassistant.app/cocktail-02.schema.json) and [Draft 1](https://barassistant.app/cocktail-01.schema.json).'
      operationId: importCocktail
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                source:
                  description: 'Valid JSON structure to import.'
                  type: string
                duplicate_actions:
                  $ref: '#/components/schemas/DuplicateActionsEnum'
                  description: 'How to handle duplicates. Cocktails are matched by lowercase name.'
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /import/scrape:
    post:
      tags:
        - Import
      summary: 'Scrape a recipe'
      description: 'Try to scrape a recipe from a website. Most of the well known recipe websites should work. Data returned is a valid JSON schema that you can import using import cocktail endpoint.'
      operationId: scrapeRecipe
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                source:
                  type: string
                  example: 'https://www.example.com/recipe-url'
              type: object
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [schema_version, schema, scraper_meta], properties: { schema_version: { type: string, example: draft2 }, schema: { $ref: 'https://barassistant.app/cocktail-02.schema.json' }, scraper_meta: { type: array, items: { required: [_id, source], properties: { _id: { type: string }, source: { type: string } }, type: object } } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /ingredient-categories:
    get:
      tags:
        - 'Ingredient category'
      summary: 'Show a list of ingredient categories'
      operationId: listIngredientCategories
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientCategory' } }
                type: object
    post:
      tags:
        - 'Ingredient category'
      summary: 'Create a new ingredient category'
      operationId: saveIngredientCategory
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredient-categories/{id}':
    get:
      tags:
        - 'Ingredient category'
      summary: 'Show ingredient category'
      operationId: showIngredientCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Ingredient category'
      summary: 'Update ingredient category'
      operationId: updateIngredientCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientCategoryRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/IngredientCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Ingredient category'
      summary: 'Delete ingredient category'
      operationId: deleteIngredientCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: 'Show a list of ingredients'
      operationId: listIngredients
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                type: integer
              name:
                type: string
              name_exact:
                type: string
              category_id:
                type: integer
              origin:
                type: string
              created_user_id:
                type: integer
              on_shopping_list:
                type: boolean
              on_shelf:
                type: boolean
              bar_shelf:
                type: boolean
              strength_min:
                type: number
                format: float
              strength_max:
                type: number
                format: float
              main_ingredients:
                type: string
              complex:
                type: boolean
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`, `strength`, `total_cocktails`.'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `parentIngredient`, `varieties`, `prices`, `ingredientParts`, `category`, `images`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Ingredient' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Ingredients
      summary: 'Create an ingredient'
      operationId: saveIngredient
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}':
    get:
      tags:
        - Ingredients
      summary: 'Show an ingredient'
      operationId: showIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Ingredients
      summary: 'Update an ingredient'
      operationId: updateIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Ingredients
      summary: 'Delete an ingredient'
      operationId: deleteIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/extra':
    get:
      tags:
        - Ingredients
      summary: 'Extra cocktails you can make if you add this ingredient to your shelf'
      operationId: extraIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/cocktails':
    get:
      tags:
        - Ingredients
      summary: 'List of cocktails that use this ingredient'
      operationId: ingredientCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/substitutes':
    get:
      tags:
        - Ingredients
      summary: 'List ingredient substitutes'
      description: 'Show a list of ingredients that are used as a substitute for this ingredient in cocktail recipes.'
      operationId: ingredientSubstitutes
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /menu:
    get:
      tags:
        - Menu
      summary: 'Show menu'
      operationId: showMenu
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Menu' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Menu
      summary: 'Update menu'
      operationId: updateMenu
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Menu' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/explore/menus/{slug}':
    get:
      tags:
        - Explore
      summary: 'Show public bar menu'
      operationId: publicMenu
      parameters:
        -
          name: slug
          in: path
          description: 'Bar database slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/MenuExplore' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /menu/export:
    get:
      tags:
        - Menu
      summary: 'Export menu'
      description: 'Export menu as CSV'
      operationId: exportMenu
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            text/csv:
              schema:
                type: string
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /notes:
    get:
      tags:
        - Notes
      summary: 'Show a list of all notes'
      operationId: listNotes
      parameters:
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Note' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
    post:
      tags:
        - Notes
      summary: 'Create a new note'
      operationId: saveNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Note' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/notes/{id}':
    get:
      tags:
        - Notes
      summary: 'Show a single note'
      operationId: showNote
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Note' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Notes
      summary: 'Delete a specific note'
      operationId: deleteNote
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /tokens:
    get:
      tags:
        - Tokens
      summary: 'Show a list of tokens'
      operationId: listTokens
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PersonalAccessToken' } }
                type: object
    post:
      tags:
        - Tokens
      summary: 'Create new personal access token'
      operationId: saveToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessTokenRequest'
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Token' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/tokens/{id}':
    delete:
      tags:
        - Tokens
      summary: 'Revoke personal access token'
      operationId: deleteToken
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /price-categories:
    get:
      tags:
        - 'Price category'
      summary: 'Show a list of price categories'
      operationId: listPriceCategories
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PriceCategory' } }
                type: object
    post:
      tags:
        - 'Price category'
      summary: 'Create a new price category'
      operationId: savePriceCategory
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/price-categories/{id}':
    get:
      tags:
        - 'Price category'
      summary: 'Show a price category'
      operationId: 10017aa4f043f641c210bafc56092997
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Price category'
      summary: 'Update price category'
      operationId: updatePriceCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Price category'
      summary: 'Delete price category'
      operationId: deletePriceCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /profile:
    get:
      tags:
        - Profile
      summary: 'Show profile'
      operationId: showProfile
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Profile
      summary: 'Update profile'
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/ratings':
    post:
      tags:
        - Ratings
      summary: 'Rate a cocktail'
      operationId: rateCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                rating:
                  type: integer
              type: object
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Ratings
      summary: "Delete current user's cocktail rating"
      operationId: deleteRating
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /server/version:
    get:
      tags:
        - Server
      summary: 'Show server information'
      operationId: showServerVersion
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ServerVersion' }
                type: object
      security:
        - {  }
  '/users/{id}/ingredients':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'Show a list of shelf ingredients'
      description: 'Ingredients that user saved to their shelf'
      operationId: listUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
  '/users/{id}/cocktails':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'Show a list shelf cocktails'
      description: 'Cocktails that the user can make with ingredients on their shelf'
      operationId: listUserShelfCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
  '/users/{id}/cocktails/favorites':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'Show a list of cocktails user has favorited'
      operationId: listUserFavoriteCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
  '/users/{id}/ingredients/batch-store':
    post:
      tags:
        - 'Users: Shelf'
      summary: 'Batch store ingredients to the shelf'
      operationId: batchStoreUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/ingredients/batch-delete':
    post:
      tags:
        - 'Users: Shelf'
      summary: 'Delete multiple ingredients from the shelf'
      operationId: batchDeleteUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/ingredients/recommend':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'Recommend next ingredients'
      operationId: recommendIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientRecommend' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/ingredients':
    get:
      tags:
        - 'Bar Shelf'
      summary: 'Show a list of bar shelf ingredients'
      description: "Ingredients that bar has in it's shelf"
      operationId: listBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
  '/bars/{id}/ingredients/batch-store':
    post:
      tags:
        - 'Bar Shelf'
      summary: 'Batch store bar ingredients to bar shelf'
      operationId: batchStoreBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/ingredients/batch-delete':
    post:
      tags:
        - 'Bar Shelf'
      summary: 'Delete multiple ingredients from bar shelf'
      operationId: batchDeleteBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/cocktails':
    get:
      tags:
        - 'Bar Shelf'
      summary: 'Show a list bar shelf cocktails'
      description: 'Cocktails that the bar can make with ingredients on their shelf'
      operationId: listBarShelfCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { properties: { first: { type: [string, 'null'] }, last: { type: [string, 'null'] }, prev: { type: [string, 'null'] }, next: { type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { type: integer }, from: { type: integer }, last_page: { type: integer }, links: { type: array, items: { properties: { url: { type: string }, label: { type: string }, active: { type: boolean } }, type: object } }, path: { type: string }, per_page: { type: integer }, to: { type: integer }, total: { type: integer } }, type: object }
                type: object
  '/users/{id}/shopping-list':
    get:
      tags:
        - 'Users: Shopping list'
      summary: 'Show shopping list'
      operationId: listShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ShoppingList' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/batch-store':
    post:
      tags:
        - 'Users: Shopping list'
      summary: 'Batch add ingredients to shopping list'
      operationId: batchStoreShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListRequest'
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/batch-delete':
    post:
      tags:
        - 'Users: Shopping list'
      summary: 'Batch delete ingredients from shopping list'
      operationId: batchDeleteShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { properties: { id: { type: integer } }, type: object }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/share':
    get:
      tags:
        - 'Users: Shopping list'
      summary: 'Share shopping list'
      operationId: shareShoppingList
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: type
          in: query
          description: 'Type of share. Available types: `markdown`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [type, content], properties: { type: { type: string, example: markdown }, content: { type: string, example: '<content in requested format>' } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/stats':
    get:
      tags:
        - Bars
      summary: 'Show bar stats'
      operationId: showBarStats
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/BarStats' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /billing/subscription:
    get:
      tags:
        - Billing
      summary: 'Get subscription status'
      operationId: showSubscription
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UserSubscription' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Billing
      summary: 'Update subscription'
      operationId: updateSubscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                type:
                  type: string
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /tags:
    get:
      tags:
        - Tag
      summary: 'Show a list of all tags'
      operationId: listTags
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Tag' } }
                type: object
    post:
      tags:
        - Tag
      summary: 'Create a new tag'
      operationId: saveTag
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/tags/{id}':
    get:
      tags:
        - Tag
      summary: 'Show a single tag'
      operationId: showTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Tag
      summary: 'Update tag'
      operationId: updateTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Tag
      summary: 'Delete tag'
      operationId: deleteTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /users:
    get:
      tags:
        - Users
      summary: 'Show a list of users of a bar'
      operationId: listUsers
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/User' } }
                type: object
    post:
      tags:
        - Users
      summary: 'Create a new user'
      operationId: saveUser
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Show a user'
      operationId: showUser
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Users
      summary: 'Update a user'
      operationId: updateUser
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Users
      summary: 'Delete a user'
      operationId: deleteUser
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /utensils:
    get:
      tags:
        - Utensils
      summary: 'Show a list of utensils'
      operationId: listUtensils
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Utensil' } }
                type: object
    post:
      tags:
        - Utensils
      summary: 'Create a new utensil'
      operationId: saveUtensil
      parameters:
        -
          name: bar_id
          in: query
          description: 'Database id of a bar. Required if you are not using `Bar-Assistant-Bar-Id` header.'
          required: false
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar. Required if you are not using `bar_id` query string.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/utensils/{id}':
    get:
      tags:
        - Utensils
      summary: 'Show utensil'
      operationId: showUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Utensils
      summary: 'Update a specific utensil'
      operationId: updateUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Utensils
      summary: 'Delete specific utensil'
      operationId: deleteUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
components:
  schemas:
    BarOptionsEnum:
      type: string
      enum:
        - ingredients
        - cocktails
    ExportTypeEnum:
      type: string
      enum:
        - datapack
        - schema
        - md
        - json-ld
        - xml
        - yaml
    ForceUnitConvertEnum:
      type: string
      enum:
        - none
        - ml
        - oz
        - cl
    DuplicateActionsEnum:
      type: string
      enum:
        - none
        - skip
        - overwrite
    AbilityEnum:
      type: string
      enum:
        - cocktails.read
        - cocktails.write
        - ingredients.read
        - ingredients.write
    BarStatusEnum:
      type: string
      enum:
        - provisioning
        - active
        - deactivated
    APIError:
      required:
        - type
        - message
      properties:
        type:
          type: string
          example: api_error
        message:
          type: string
          example: 'Resource record not found.'
      type: object
    Bar:
      required:
        - id
        - slug
        - name
        - subtitle
        - description
        - status
        - access
        - invite_code
        - active
        - settings
        - search_host
        - search_token
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: bar-name-1
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type:
            - string
            - 'null'
          example: 'A short subtitle of a bar'
        description:
          type:
            - string
            - 'null'
          example: 'Bar description'
        invite_code:
          type:
            - string
            - 'null'
          example: 01H8S3VH2HTEB3D893AW8NTBBC
        status:
          $ref: '#/components/schemas/BarStatusEnum'
        settings:
          type: array
          items:
            type: object
            additionalProperties: true
        search_host:
          type:
            - string
            - 'null'
        search_token:
          type:
            - string
            - 'null'
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
        created_user:
          $ref: '#/components/schemas/UserBasic'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
            -
              type: 'null'
        access:
          type: array
          items:
            properties:
              role_id:
                type: integer
                example: 1
              can_edit:
                type: boolean
                example: true
              can_delete:
                type: boolean
                example: true
              can_activate:
                type: boolean
                example: true
              can_deactivate:
                type: boolean
                example: true
            type: object
      type: object
    BarBasic:
      required:
        - id
        - slug
        - name
        - subtitle
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: bar-name-1
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type: string
          example: 'Bar subtitle'
      type: object
    BarMembership:
      required:
        - user_id
        - user_name
        - bar_id
        - is_shelf_public
        - use_parent_as_substitute
      properties:
        user_id:
          type: integer
          example: 1
        user_name:
          type: string
          example: Bartender
        bar_id:
          type: integer
          example: 1
        is_shelf_public:
          type: boolean
          example: true
        use_parent_as_substitute:
          type: boolean
          example: true
      type: object
    BarRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type:
            - string
            - 'null'
          example: 'A short subtitle of a bar'
        description:
          type:
            - string
            - 'null'
          example: 'Bar description'
        slug:
          type: string
          example: bar-name-1
        default_units:
          description: 'Used only as a setting for client apps.'
          type: string
          enum:
            - ml
            - cl
            - oz
          example: ml
        default_lang:
          description: 'Locale code, used only as a setting for client apps, does not change language of the API.'
          type:
            - string
            - 'null'
          example: en-US
        enable_invites:
          description: 'Enable users with invite code to join this bar. Default `false`.'
          type: boolean
        options:
          description: 'List of data that the bar will start with. Cocktails cannot be imported without ingredients.'
          type: array
          items:
            type: enum
            enum:
              - ingredients
              - cocktails
      type: object
    BarStats:
      required:
        - total_cocktails
        - total_ingredients
        - total_favorited_cocktails
        - total_shelf_cocktails
        - total_shelf_ingredients
        - total_bar_members
        - total_collections
        - favorite_tags
        - your_top_ingredients
        - most_popular_ingredients
        - top_rated_cocktails
      properties:
        total_cocktails:
          type: integer
          example: 1
        total_ingredients:
          type: integer
          example: 1
        total_favorited_cocktails:
          type: integer
          example: 1
        total_shelf_cocktails:
          type: integer
          example: 1
        total_shelf_ingredients:
          type: integer
          example: 1
        total_bar_shelf_cocktails:
          type: integer
          example: 1
        total_bar_members:
          type: integer
          example: 1
        total_collections:
          type: integer
          example: 1
        favorite_tags:
          type: array
          items:
            required:
              - id
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 31
              name:
                type: string
                example: 'Tag name'
              cocktails_count:
                type: integer
                example: 12
            type: object
        your_top_ingredients:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: gin
              name:
                type: string
                example: Gin
              cocktails_count:
                type: integer
                example: 1
            type: object
        most_popular_ingredients:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: gin
              name:
                type: string
                example: Gin
              cocktails_count:
                type: integer
                example: 1
            type: object
        top_rated_cocktails:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - avg_rating
              - votes
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: old-fashioned
              name:
                type: string
                example: 'Old Fashioned'
              avg_rating:
                type: integer
                example: 3
              votes:
                type: integer
                example: 42
            type: object
      type: object
    Cocktail:
      required:
        - id
        - name
        - slug
        - garnish
        - description
        - instructions
        - source
        - public_id
        - public_at
        - created_at
        - updated_at
        - abv
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Cocktail name'
        slug:
          type: string
          example: cocktail-name-1
        instructions:
          type: string
          example: 'Step by step instructions'
        garnish:
          type:
            - string
            - 'null'
          example: Garnish
        description:
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        public_id:
          type:
            - string
            - 'null'
          example: public-id-1
        public_at:
          type:
            - string
            - 'null'
          format: date-time
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        tags:
          type: array
          items:
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: 'Tag name'
            type: object
        rating:
          required:
            - user
            - average
            - total_votes
          properties:
            user:
              description: "Current user's rating"
              type:
                - integer
                - 'null'
              example: 1
            average:
              description: 'Average rating'
              type: integer
              example: 4
            total_votes:
              type: integer
              example: 12
          type: object
        glass:
          oneOf:
            -
              $ref: '#/components/schemas/Glass'
            -
              type: 'null'
        utensils:
          type: array
          items:
            $ref: '#/components/schemas/Utensil'
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredient'
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
        method:
          oneOf:
            -
              $ref: '#/components/schemas/CocktailMethod'
            -
              type: 'null'
        abv:
          type:
            - number
            - 'null'
          format: float
          example: 40
        volume_ml:
          type:
            - number
            - 'null'
          format: float
          example: 67.5
        alcohol_units:
          type:
            - number
            - 'null'
          format: float
          example: 25.5
        calories:
          type:
            - integer
            - 'null'
          example: 350
        created_user:
          $ref: '#/components/schemas/UserBasic'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
            -
              type: 'null'
        in_shelf:
          type: boolean
        in_bar_shelf:
          type: boolean
        access:
          required:
            - can_edit
            - can_delete
            - can_rate
            - can_add_note
          properties:
            can_edit:
              type: boolean
              example: true
            can_delete:
              type: boolean
              example: true
            can_rate:
              type: boolean
              example: true
            can_add_note:
              type: boolean
              example: true
          type: object
        navigation:
          required:
            - prev
            - next
          properties:
            prev:
              type:
                - string
                - 'null'
              example: old-fashioned-1
            next:
              type:
                - string
                - 'null'
              example: tom-collins-1
          type: object
      type: object
    CocktailBasic:
      description: 'Minimal cocktail information'
      required:
        - id
        - slug
        - name
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: old-fashioned-1
        name:
          type: string
          example: 'Old fashioned'
        short_ingredients:
          type: array
          items:
            type: string
            example: Vodka
      type: object
    CocktailExplore:
      properties:
        bar:
          $ref: '#/components/schemas/BarBasic'
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: 'Step by step instructions'
        garnish:
          type:
            - string
            - 'null'
          example: Garnish
        description:
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        images:
          type: array
          items:
            properties:
              sort:
                type: integer
                example: 1
              placeholder_hash:
                type: string
                example: a1b2c3d4e5f6g7h8i9j0
              url:
                type: string
                example: 'https://example.com/image.jpg'
              copyright:
                type: string
                example: 'Image copyright'
            type: object
        tags:
          type: array
          items:
            type: string
        glass:
          type:
            - string
            - 'null'
        utensils:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            properties:
              name:
                type: string
                example: 'Ingredient name'
              amount:
                type: number
                example: 30
              amount_max:
                type:
                  - number
                  - 'null'
                example: 45
              units:
                type: string
                example: ml
              optional:
                type: boolean
                example: true
              note:
                type:
                  - string
                  - 'null'
                example: 'Ingredient note'
              substitutes:
                type: array
                items:
                  properties: { name: { type: string, example: 'Ingredient name' }, amount: { type: [number, 'null'], example: 30 }, amount_max: { type: [number, 'null'], example: 45 }, units: { type: [string, 'null'], example: ml } }
                  type: object
            type: object
        method:
          type:
            - string
            - 'null'
        abv:
          type:
            - number
            - 'null'
          format: float
          example: 40
      type: object
    CocktailIngredient:
      required:
        - ingredient
        - sort
        - amount
        - units
        - formatted
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        sort:
          type: integer
          example: 0
        amount:
          type: number
          format: float
          example: 30
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        units:
          type: string
          example: ml
        optional:
          type: boolean
          example: false
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstitute'
        note:
          type:
            - string
            - 'null'
          example: 'Additional notes'
        formatted:
          description: 'Amounts in different units, converted if possible'
          required:
            - ml
            - oz
            - cl
          properties:
            ml:
              required:
                - amount
                - amount_max
                - units
                - full_text
              properties:
                amount:
                  type: number
                  format: float
                  example: 30
                amount_max:
                  type: number
                  format: float
                  example: 60
                units:
                  type: string
                  example: ml
                full_text:
                  type: string
                  example: '30-60 ml'
              type: object
            oz:
              required:
                - amount
                - amount_max
                - units
                - full_text
              properties:
                amount:
                  type: number
                  format: float
                  example: 1
                amount_max:
                  type: number
                  format: float
                  example: 2
                units:
                  type: string
                  example: oz
                full_text:
                  type: string
                  example: '1-2 oz'
              type: object
            cl:
              required:
                - amount
                - amount_max
                - units
                - full_text
              properties:
                amount:
                  type: number
                  format: float
                  example: 3
                amount_max:
                  type: number
                  format: float
                  example: 6
                units:
                  type: string
                  example: cl
                full_text:
                  type: string
                  example: '3-6 cl'
              type: object
          type: object
          additionalProperties: true
        in_shelf:
          type: boolean
          example: true
        in_shelf_as_substitute:
          type: boolean
          example: true
        in_shelf_as_complex_ingredient:
          type: boolean
          example: true
        in_bar_shelf:
          type: boolean
          example: true
        in_bar_shelf_as_substitute:
          type: boolean
          example: true
        in_bar_shelf_as_complex_ingredient:
          type: boolean
          example: true
      type: object
    CocktailIngredientRequest:
      required:
        - ingredient_id
        - amount
        - units
      properties:
        ingredient_id:
          type: integer
        name:
          type:
            - string
            - 'null'
        amount:
          type: number
          format: float
          example: 30
        units:
          type: string
          example: ml
        sort:
          type: integer
        optional:
          type: boolean
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstituteRequest'
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        note:
          type:
            - string
            - 'null'
      type: object
    CocktailIngredientSubstitute:
      required:
        - ingredient
        - amount
        - amount_max
        - units
        - in_shelf
        - in_bar_shelf
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        amount:
          type:
            - number
            - 'null'
          format: float
          example: 30
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        units:
          type:
            - string
            - 'null'
          example: ml
        in_shelf:
          type: boolean
          example: true
        in_bar_shelf:
          type: boolean
          example: true
      type: object
    CocktailIngredientSubstituteRequest:
      required:
        - ingredient_id
      properties:
        ingredient_id:
          type: integer
        amount:
          type:
            - number
            - 'null'
          format: float
          example: 30
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        units:
          type:
            - string
            - 'null'
          example: ml
      type: object
    CocktailMethod:
      required:
        - id
        - name
        - dilution_percentage
        - cocktails_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Shake
        dilution_percentage:
          type: integer
          example: 20
        cocktails_count:
          type: integer
          example: 32
      type: object
    CocktailMethodRequest:
      required:
        - name
        - dilution_percentage
      properties:
        name:
          type: string
          example: Shake
        dilution_percentage:
          type: integer
          example: 20
      type: object
    CocktailPrice:
      required:
        - missing_prices_count
        - price_category
        - total_price
        - prices_per_ingredient
      properties:
        missing_prices_count:
          description: 'Number of ingredients that are missing defined prices in this category'
          type: integer
          example: 1
        price_category:
          $ref: '#/components/schemas/PriceCategory'
        total_price:
          $ref: '#/components/schemas/Price'
          description: 'Total cocktail price, sum of `price_per_pour` amounts'
        prices_per_ingredient:
          type: array
          items:
            required:
              - ingredient
              - price_per_unit
              - price_per_use
              - units
            properties:
              ingredient:
                $ref: '#/components/schemas/IngredientBasic'
              units:
                description: 'Units used for price calculation'
                type: string
              price_per_unit:
                $ref: '#/components/schemas/Price'
                description: 'Price per 1 unit of ingredient amount'
              price_per_use:
                $ref: '#/components/schemas/Price'
                description: 'Price per cocktail ingredient part'
            type: object
      type: object
    CocktailRequest:
      required:
        - name
        - instructions
      properties:
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: 'Step by step instructions'
        description:
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        garnish:
          type:
            - string
            - 'null'
          example: Garnish
        glass_id:
          type:
            - integer
            - 'null'
          example: 1
        method_id:
          type:
            - integer
            - 'null'
          example: 1
        tags:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientRequest'
        images:
          description: 'List of existing image ids'
          type: array
          items:
            type: integer
        utensils:
          description: 'List of existing utensil ids'
          type: array
          items:
            type: integer
      type: object
    Collection:
      required:
        - id
        - name
        - description
        - is_bar_shared
        - created_at
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Collection name'
        description:
          type:
            - string
            - 'null'
          example: 'Collection description'
        is_bar_shared:
          type: boolean
        created_at:
          type: string
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
        created_user:
          $ref: '#/components/schemas/UserBasic'
        cocktails:
          type: array
          items:
            $ref: '#/components/schemas/CocktailBasic'
      type: object
    CollectionRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: 'Collection name'
        description:
          type:
            - string
            - 'null'
          example: 'Collection description'
        is_bar_shared:
          type: boolean
        cocktails:
          type: array
          items:
            type: integer
      type: object
    Export:
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: cocktails.csv
        created_at:
          type: string
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
        bar_name:
          type: string
          example: 'Bar name'
        is_done:
          type: boolean
          example: true
      type: object
    ExportRequest:
      properties:
        type:
          $ref: '#/components/schemas/ExportTypeEnum'
        units:
          $ref: '#/components/schemas/ForceUnitConvertEnum'
        bar_id:
          type: integer
      type: object
    FileDownloadLink:
      properties:
        url:
          description: 'Absolute URL to download the export'
          type: string
          example: 'http://example.com/api/exports/29/download?t=2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88&e=1723480826'
        token:
          type: string
          example: 2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88
        expires:
          type: string
          example: '2024-08-12T16:40:26+00:00'
      type: object
    Glass:
      required:
        - id
        - name
        - description
        - cocktails_count
        - volume
        - volume_units
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Lowball
        description:
          type:
            - string
            - 'null'
          example: 'Glass for smaller cocktails'
        cocktails_count:
          type: integer
          example: 32
        volume:
          type:
            - number
            - 'null'
          format: float
          example: 120
        volume_units:
          type:
            - string
            - 'null'
          example: ml
      type: object
    GlassRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Lowball
        description:
          type:
            - string
            - 'null'
          example: 'Glass for smaller cocktails'
        volume:
          type:
            - number
            - 'null'
          format: float
          example: 120
        volume_units:
          type:
            - string
            - 'null'
          example: ml
      type: object
    Image:
      description: 'Image attached to a specific resource'
      required:
        - id
        - file_path
        - url
        - copyright
        - sort
        - placeholder_hash
      properties:
        id:
          type: integer
          example: 1
        file_path:
          type: string
          example: cocktails/1/image.jpg
        url:
          type: string
          example: 'http://example.com/uploads/cocktails/1/image.jpg'
        copyright:
          type:
            - string
            - 'null'
          example: 'Image copyright'
        sort:
          type: integer
          example: 1
        placeholder_hash:
          type:
            - string
            - 'null'
          example: 1QcSHQRnh493V4dIh4eXh1h4kJUI
      type: object
    ImageRequest:
      required:
        - image
        - sort
      properties:
        image:
          description: 'Image file. Base64 encoded images also supported. Max 50MB'
          type:
            - string
            - 'null'
          format: binary
        id:
          description: 'Existing image id, used to update an existing image'
          type:
            - integer
            - 'null'
        sort:
          type: integer
          example: 1
        copyright:
          type:
            - string
            - 'null'
          example: 'Image copyright'
      type: object
    Ingredient:
      required:
        - id
        - slug
        - name
        - description
        - origin
        - color
        - created_at
        - updated_at
        - strength
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: gin-1
        name:
          type: string
          example: Gin
        strength:
          type: number
          format: float
          example: 40
        description:
          type:
            - string
            - 'null'
          example: 'Gin is a type of alcoholic spirit'
        origin:
          type:
            - string
            - 'null'
          example: Worldwide
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
        parent_ingredient:
          oneOf:
            -
              $ref: '#/components/schemas/IngredientBasic'
            -
              type: 'null'
        color:
          type: string
          example: '#ffffff'
        category:
          oneOf:
            -
              $ref: '#/components/schemas/IngredientCategory'
            -
              type: 'null'
        cocktails_count:
          type: integer
          example: 12
        varieties:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        cocktails:
          type: array
          items:
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: old-fashioned-1
              name:
                type: string
                example: 'Old fashioned'
            type: object
        created_user:
          $ref: '#/components/schemas/UserBasic'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
            -
              type: 'null'
        access:
          type: array
          items:
            properties:
              can_edit:
                type: boolean
                example: true
              can_delete:
                type: boolean
                example: true
            type: object
        ingredient_parts:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        prices:
          type: array
          items:
            $ref: '#/components/schemas/IngredientPrice'
        in_shelf:
          type: boolean
        in_bar_shelf:
          type: boolean
        in_shopping_list:
          type: boolean
        used_as_substitute_for:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        can_be_substituted_with:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
      type: object
    IngredientBasic:
      description: 'Minimal ingredient information'
      required:
        - id
        - slug
        - name
      properties:
        id:
          type: integer
          example: 1
        slug:
          type: string
          example: gin-1
        name:
          type: string
          example: Gin
      type: object
    IngredientCategory:
      required:
        - id
        - name
        - description
        - ingredients_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Spirits
        description:
          type:
            - string
            - 'null'
          example: 'Category of base spirits'
        ingredients_count:
          type: integer
          example: 32
      type: object
    IngredientCategoryRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Spirits
        description:
          type:
            - string
            - 'null'
          example: 'Category of base spirits'
      type: object
    IngredientPrice:
      required:
        - price_category
        - price
        - amount
        - units
        - description
        - created_at
        - updated_at
      properties:
        price_category:
          $ref: '#/components/schemas/PriceCategory'
        price:
          $ref: '#/components/schemas/Price'
        amount:
          type: number
          format: float
          example: 30
        units:
          type: string
          example: ml
        description:
          type:
            - string
            - 'null'
          example: 'Updated price'
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
      type: object
    IngredientPriceRequest:
      required:
        - price_category_id
        - price
        - amount
        - units
      properties:
        price_category_id:
          type: integer
        price:
          type: integer
        amount:
          type: number
          format: float
        units:
          type: string
        description:
          type:
            - string
            - 'null'
      type: object
    IngredientRecommend:
      description: 'Ingredient recommendation with number of potential cocktails'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/IngredientBasic'
        -
          properties:
            potential_cocktails:
              type: integer
              example: 10
          type: object
    IngredientRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Gin
        ingredient_category_id:
          type:
            - integer
            - 'null'
          example: 1
        strength:
          type: number
          format: float
          example: 40
        description:
          type:
            - string
            - 'null'
          example: 'Gin is a type of alcoholic spirit'
        origin:
          type:
            - string
            - 'null'
          example: Worldwide
        color:
          type:
            - string
            - 'null'
          example: '#ffffff'
        parent_ingredient_id:
          type:
            - integer
            - 'null'
          example: 1
        images:
          description: 'Existing image ids'
          type: array
          items:
            type: integer
        complex_ingredient_part_ids:
          description: 'Existing ingredient ids'
          type: array
          items:
            type: integer
        prices:
          type: array
          items:
            $ref: '#/components/schemas/IngredientPriceRequest'
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: admin@example.com
        password:
          type: string
          format: password
          example: password
        token_name:
          type:
            - string
            - 'null'
          example: 'My device'
      type: object
    Menu:
      properties:
        id:
          type: integer
          example: 1
        is_enabled:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
        categories:
          type: array
          items:
            properties:
              name:
                type: string
                example: 'Category name'
              cocktails:
                type: array
                items:
                  properties: { id: { type: integer, example: 1 }, slug: { type: string, example: cocktail-name-1 }, sort: { type: integer, example: 1 }, price: { $ref: '#/components/schemas/Price' }, currency: { type: string, example: EUR }, name: { type: string, example: 'Cocktail name' }, short_ingredients: { type: array, items: { type: string, example: Vodka } } }
                  type: object
            type: object
      type: object
    MenuExplore:
      properties:
        bar:
          properties:
            name:
              type: string
              example: 'Bar name'
            subtitle:
              type: string
              example: 'Bar subtitle'
            description:
              type: string
              example: 'Bar description'
          type: object
        categories:
          type: array
          items:
            properties:
              name:
                type: string
                example: 'Category name'
              cocktails:
                type: array
                items:
                  properties: { sort: { type: integer, example: 1 }, price: { $ref: '#/components/schemas/Price' }, public_id: { type: string, example: 01ARZ3NDEKTSV4RRFFQ69G5FAV }, slug: { type: string, example: cocktail-name-1 }, currency: { type: string, example: EUR }, name: { type: string, example: 'Cocktail name' }, short_ingredients: { type: array, items: { type: string, example: Vodka } }, image: { type: string, example: 'https://example.com/image.jpg' } }
                  type: object
            type: object
      type: object
    MenuRequest:
      required:
        - is_enabled
        - cocktails
      properties:
        is_enabled:
          type: boolean
        cocktails:
          type: array
          items:
            properties:
              cocktail_id:
                type: integer
                example: 1
              price:
                type: integer
                format: minor
                example: 2252
              category_name:
                type: string
                example: 'Category name'
              sort:
                type: integer
                example: 1
              currency:
                type: string
                format: 'ISO 4217'
                example: EUR
            type: object
      type: object
    Note:
      properties:
        id:
          type: integer
          example: 1
        note:
          type: string
          example: 'Note text'
        user_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2022-01-01T00:00:00+00:00'
      type: object
    NoteRequest:
      required:
        - note
        - resource_id
        - resource
      properties:
        note:
          type: string
          example: 'Note text'
        resource_id:
          type: integer
          example: 1
        resource:
          type: string
          example: cocktail
      type: object
    PersonalAccessToken:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: user_generated
        abilities:
          type: array
          items:
            type: string
          example:
            - cocktails.read
            - cocktails.write
            - ingredients.read
            - ingredients.write
        last_used_at:
          type: string
          example: '2023-05-14T21:23:40.000000Z'
        created_at:
          type: string
          example: '2023-05-14T21:23:40.000000Z'
        expires_at:
          type: string
          example: '2023-05-14T21:23:40.000000Z'
      type: object
    PersonalAccessTokenRequest:
      required:
        - abilities
      properties:
        name:
          type:
            - string
            - 'null'
          example: user_generated
        abilities:
          type: array
          items:
            $ref: '#/components/schemas/AbilityEnum'
        expires_at:
          type:
            - string
            - 'null'
          example: '2023-05-14T21:23:40.000000Z'
      type: object
    Price:
      required:
        - price
        - price_minor
        - formatted_price
        - currency
      properties:
        price:
          type: number
          format: float
          example: 13.39
        price_minor:
          type: integer
          example: 1339
        formatted_price:
          type: string
          example: 'EUR 13.39'
        currency:
          type: string
          example: EUR
      type: object
    PriceCategory:
      required:
        - id
        - name
        - description
        - currency
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type:
            - string
            - 'null'
          example: 'Current price on amazon.de'
        currency:
          type: string
          format: 'ISO 4217'
          example: EUR
        currency_symbol:
          type: string
          example: €
      type: object
    PriceCategoryRequest:
      required:
        - name
        - currency
      properties:
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type:
            - string
            - 'null'
          example: 'Current price on amazon.de'
        currency:
          type: string
          format: 'ISO 4217'
          example: EUR
      type: object
    Profile:
      required:
        - id
        - name
        - cocktails_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Floral
        email:
          type: string
          example: example@example.com
        is_subscribed:
          type: boolean
        memberships:
          type: array
          items:
            $ref: '#/components/schemas/BarMembership'
      type: object
    ProfileRequest:
      required:
        - name
        - email
      properties:
        bar_id:
          type:
            - integer
            - 'null'
        name:
          type: string
          example: 'Bar Tender'
        email:
          type: string
          example: new@email.com
        password:
          type:
            - string
            - 'null'
          format: password
          example: newpassword
        is_shelf_public:
          type: boolean
        use_parent_as_substitute:
          type: boolean
      type: object
    Rating:
      properties:
        rateable_id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        rating:
          type: integer
          example: 3
      type: object
    RegisterRequest:
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          example: admin@example.com
        name:
          type: string
          example: 'Bar Tender'
        password:
          type: string
          format: password
          minLength: 5
          example: password
      type: object
    ServerVersion:
      required:
        - version
        - type
        - search_host
        - search_version
      properties:
        version:
          type: string
          example: 1.0.0
        latest_version:
          description: 'Latest version available on GitHub'
          type: string
          example: 3.1.0
        is_latest:
          type: boolean
          example: true
        type:
          type: string
          example: production
        search_host:
          type: string
          example: 'https://search.example.com'
        search_version:
          type: string
          example: 1.2.0
      type: object
    ShoppingList:
      required:
        - ingredient
        - quantity
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        quantity:
          type: integer
          example: 3
      type: object
    ShoppingListRequest:
      required:
        - ingredients
      properties:
        ingredients:
          type: array
          items:
            properties:
              id:
                type: integer
              quantity:
                type: integer
            type: object
      type: object
    Subscription:
      properties:
        type:
          type: string
        paddle_id:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
        paused_at:
          type:
            - string
            - 'null'
          format: date-time
        ends_at:
          type:
            - string
            - 'null'
          format: date-time
        past_due:
          type: boolean
        is_recurring:
          type: boolean
        next_billed_at:
          type: array
          items:
            properties:
              currency:
                type: string
              amount:
                type: string
              date:
                type: string
                format: date-time
            type: object
        update_payment_url:
          type: string
          format: uri
        cancel_url:
          type: string
          format: uri
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
      type: object
    Tag:
      required:
        - id
        - name
        - cocktails_count
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Floral
        cocktails_count:
          type: integer
          example: 12
      type: object
    TagRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Floral
      type: object
    Token:
      properties:
        token:
          type: string
          example: 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII
      type: object
    Transaction:
      properties:
        total:
          type: string
        tax:
          type: string
        currency:
          type: string
        status:
          type: string
        invoice_number:
          type: string
        url:
          type: string
          format: uri
        billed_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
      type: object
    User:
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bartender
        email:
          type: string
          example: admin@example.com
        is_subscribed:
          type: boolean
        role:
          properties:
            bar_id:
              type: integer
              example: 1
            role_id:
              type: integer
              example: 1
            role_name:
              type: string
              example: Admin
          type: object
      type: object
    UserBasic:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Bartender
      type: object
    UserRequest:
      required:
        - role_id
        - email
        - name
        - password
      properties:
        role_id:
          type: integer
          example: 1
        email:
          type: string
          example: admin@example.com
        name:
          type: string
          example: 'Bar Tender'
        password:
          type: string
          format: password
          example: password
      type: object
    UserSubscription:
      required:
        - prices
        - customer
        - subscription
      properties:
        prices:
          type: string
        customer:
          type: array
          items:
            required:
              - paddle_id
              - paddle_email
              - paddle_name
            properties:
              paddle_id:
                type: string
              paddle_email:
                type: string
              paddle_name:
                type: string
            type: object
        subscription:
          oneOf:
            -
              $ref: '#/components/schemas/Subscription'
            -
              type: 'null'
      type: object
    Utensil:
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Shaker
        description:
          type:
            - string
            - 'null'
          example: 'Used to shake ingredients'
      type: object
    UtensilRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Shaker
        description:
          type:
            - string
            - 'null'
          example: 'Used to shake ingredients'
      type: object
    ValidationError:
      required:
        - errors
        - message
      properties:
        message:
          type: string
          example: 'The cocktail name must be a string. (and 2 more errors)'
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      type: object
  securitySchemes:
    user_token:
      type: http
      scheme: bearer
security:
  -
    user_token: []
tags:
  -
    name: Authentication
    description: Authentication
  -
    name: Bars
    description: Bars
  -
    name: Cocktails
    description: Cocktails
  -
    name: 'Cocktail method'
    description: 'Cocktail method'
  -
    name: Collections
    description: Collections
  -
    name: Explore
    description: Explore
  -
    name: Exports
    description: Exports
  -
    name: Glasses
    description: Glasses
  -
    name: Images
    description: Images
  -
    name: Import
    description: Import
  -
    name: 'Ingredient category'
    description: 'Ingredient category'
  -
    name: Ingredients
    description: Ingredients
  -
    name: Menu
    description: Menu
  -
    name: Notes
    description: Notes
  -
    name: Tokens
    description: Tokens
  -
    name: 'Price category'
    description: 'Price category'
  -
    name: Profile
    description: Profile
  -
    name: Ratings
    description: Ratings
  -
    name: Server
    description: Server
  -
    name: 'Users: Shelf'
    description: 'Users: Shelf'
  -
    name: 'Bar Shelf'
    description: 'Bar Shelf'
  -
    name: 'Users: Shopping list'
    description: 'Users: Shopping list'
  -
    name: Billing
    description: Billing
  -
    name: Tag
    description: Tag
  -
    name: Users
    description: Users
  -
    name: Utensils
    description: Utensils
