<?php

declare(strict_types=1);

namespace Kami\Cocktail\Search;

use Throwable;
use Laravel\Scout\Engines\MeiliSearchEngine;

class MeilisearchActions implements SearchActionsContract
{
    public function __construct(private readonly MeiliSearchEngine $client)
    {
    }

    public function getPublicApiKey(): ?string
    {
        $key = $this->client->createKey([
            'actions' => ['search'],
            'indexes' => ['cocktails', 'ingredients'],
            'expiresAt' => null,
            'name' => 'Bar Assistant',
            'description' => 'Client key generated by Bar Assistant Server'
        ]);

        return $key->getKey();
    }

    public function isAvailable(): bool
    {
        try {
            return $this->client->isHealthy();
        } catch (Throwable) {
            return false;
        }
    }

    public function getVersion(): ?string
    {
        try {
            return $this->client->version()['pkgVersion'];
        } catch (Throwable) {
            return null;
        }
    }

    public function getHost(): ?string
    {
        return config('scout.meilisearch.host');
    }

    public function updateIndexSettings(): void
    {
        $this->client->index('cocktails')->updateSettings([
            'filterableAttributes' => ['id', 'tags', 'user_id', 'glass', 'average_rating', 'main_ingredient_name', 'method', 'calculated_abv', 'has_public_link'],
            'sortableAttributes' => ['name', 'date', 'average_rating'],
            'searchableAttributes' => [
                'name',
                'tags',
                'description',
                'date',
            ]
        ]);

        $this->client->index('cocktails')->updatePagination(['maxTotalHits' => 2000]);

        $this->client->index('ingredients')->updateSettings([
            'filterableAttributes' => ['category', 'strength_abv', 'origin', 'color', 'id'],
            'sortableAttributes' => ['name', 'strength_abv'],
            'searchableAttributes' => [
                'name',
                'description',
                'category',
                'origin',
            ]
        ]);

        $this->client->index('ingredients')->updatePagination(['maxTotalHits' => 2000]);
    }
}
